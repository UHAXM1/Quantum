<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QBittorrent.Client</name>
    </assembly>
    <members>
        <member name="T:QBittorrent.Client.AddTorrentFilesRequest">
            <summary>
            Request to add new torrents using torrent files.
            </summary>
            <seealso cref="T:QBittorrent.Client.AddTorrentRequestBase" />
        </member>
        <member name="M:QBittorrent.Client.AddTorrentFilesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentFilesRequest"/> class.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentFilesRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentFilesRequest"/> class.
            </summary>
            <param name="torrentFile">The torrent file's path.</param>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentFilesRequest.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentFilesRequest"/> class.
            </summary>
            <param name="torrentFiles">The torrent files' paths.</param>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentFilesRequest.TorrentFiles">
            <summary>
            The list of torrent files' paths to add.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.AddTorrentRequestBase">
            <summary>
            The base class for add torrent requests.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.DownloadFolder">
            <summary>
            Download folder
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.Cookie">
            <summary>
            Cookie sent to download the .torrent file
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.Category">
            <summary>
            Category for the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.SkipHashChecking">
            <summary>
            Skip hash checking.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.Paused">
            <summary>
            Add torrents in the paused state.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.CreateRootFolder">
            <summary>
            Create the root folder.
            </summary>
            <remarks>This value is ignored starting from API v2.7.0. Use <see cref="P:QBittorrent.Client.AddTorrentRequestBase.ContentLayout"/> for the API v2.7.0 and newer.</remarks>
            <seealso cref="P:QBittorrent.Client.AddTorrentRequestBase.ContentLayout"/>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.Rename">
            <summary>
            Rename torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.UploadLimit">
            <summary>
            Set torrent upload speed limit
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.DownloadLimit">
            <summary>
            Set torrent download speed limit
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.SequentialDownload">
            <summary>
            Enable sequential download
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.FirstLastPiecePrioritized">
            <summary>
            Prioritize download of first and last pieces
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.AutomaticTorrentManagement">
            <summary>
            Enable/disable automatic torrent management for these torrents
            </summary>
            <remarks>This value is ignored until API v2.2.0</remarks>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.Tags">
            <summary>
            Tags for the torrent
            </summary>
            <remarks>This value is ignored until API v2.6.2</remarks>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.ContentLayout">
            <summary>
            Torrent content layout.
            </summary>
            <remarks>This value is ignored until API v2.7.0. Use <see cref="P:QBittorrent.Client.AddTorrentRequestBase.CreateRootFolder"/> for the previous versions.</remarks>
            <seealso cref="P:QBittorrent.Client.AddTorrentRequestBase.CreateRootFolder"/>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.RatioLimit">
            <summary>
            Set torrent share ratio limit
            </summary>
            <remarks>This value is ignored until API v2.8.1</remarks>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentRequestBase.SeedingTimeLimit">
            <summary>
            Set torrent seeding time limit.
            </summary>
            <remarks>This value is ignored until API v2.8.1</remarks>
        </member>
        <member name="T:QBittorrent.Client.AddTorrentsRequest">
            <summary>
            Request to add new torrents using torrent files and/or URLs.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentsRequest"/> class.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentsRequest.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentsRequest"/> class.
            </summary>
            <param name="torrentFiles">The torrent files' paths.</param>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentsRequest.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentsRequest"/> class.
            </summary>
            <param name="torrentUrls">The URLs of the torrents to add.</param>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentsRequest.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentsRequest"/> class.
            </summary>
            <param name="torrentFiles">The torrent files' paths.</param>
            <param name="torrentUrls">The URLs of the torrents to add.</param>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentsRequest.TorrentUrls">
            <summary>
            The list of torrent URLs.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentsRequest.TorrentFiles">
            <summary>
            The list of torrent files' paths to add.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.AddTorrentUrlsRequest">
            <summary>
            Request to add new torrents using torrent URLs.
            </summary>
            <seealso cref="T:QBittorrent.Client.AddTorrentRequestBase" />
        </member>
        <member name="M:QBittorrent.Client.AddTorrentUrlsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentUrlsRequest"/> class.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentUrlsRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentUrlsRequest"/> class.
            </summary>
            <param name="url">The URL of the torrent to add.</param>
        </member>
        <member name="M:QBittorrent.Client.AddTorrentUrlsRequest.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.AddTorrentUrlsRequest"/> class.
            </summary>
            <param name="urls">The URLs of the torrents to add.</param>
        </member>
        <member name="P:QBittorrent.Client.AddTorrentUrlsRequest.TorrentUrls">
            <summary>
            The list of torrent URLs.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ApiLevel">
            <summary>
            qBittorrent API level.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ApiLevel.Auto">
            <summary>
            The API level is detected automatically.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ApiLevel.V1">
            <summary>
            The API Level 1. Supported by qBittorrent v3.2.0-v4.0.4.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ApiLevel.V2">
            <summary>
            The API Level 2. Supported by qBittorrent v4.1.0 or later.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ApiLevelAttribute">
            <summary>
            Annotates the minimal API Level that supports the annotated method.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QBittorrent.Client.ApiLevelAttribute.#ctor(QBittorrent.Client.ApiLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.ApiLevelAttribute"/> class.
            </summary>
            <param name="apiLevel">The minimal API Level that supports the annotated method.</param>
        </member>
        <member name="P:QBittorrent.Client.ApiLevelAttribute.Level">
            <summary>
            Gets the minimal API Level that supports the annotated method.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.ApiLevelAttribute.MaxVersion">
            <summary>
            The maximum API version that supports the annotated method.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.ApiLevelAttribute.MinVersion">
            <summary>
            The minimal API version that supports the annotated method.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ApiNotSupportedException">
            <summary>
            This exception is thrown on attempts to use functions not supported in current API version.
            </summary>
            <seealso cref="T:QBittorrent.Client.ApiLevel"/>
            <seealso cref="T:QBittorrent.Client.ApiLevelAttribute"/>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(QBittorrent.Client.ApiLevel)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="requiredApiLevel">The minimal required API level.</param>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(QBittorrent.Client.ApiLevel,System.Version)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="requiredApiLevel">The minimal required API level.</param>
            <param name="requiredApiVersion">The minimal required API version.</param>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(QBittorrent.Client.ApiLevel,System.Version,System.Version)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="requiredApiLevel">The minimal required API level.</param>
            <param name="requiredApiVersion">The minimal required API version.</param>
            <param name="maxApiVersion">The maximal supported API version.</param>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(System.String,QBittorrent.Client.ApiLevel)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="requiredApiLevel">The minimal required API level.</param>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(System.String,QBittorrent.Client.ApiLevel,System.Version)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="requiredApiLevel">The minimal required API level.</param>
            <param name="requiredApiVersion">The minimal required API version.</param>
        </member>
        <member name="M:QBittorrent.Client.ApiNotSupportedException.#ctor(System.String,QBittorrent.Client.ApiLevel,System.Version,System.Version)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.ApiNotSupportedException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="requiredApiLevel">The minimal required API level.</param>
            <param name="requiredApiVersion">The minimal required API version.</param>
            <param name="maxApiVersion">The maximum required API version.</param>
        </member>
        <member name="P:QBittorrent.Client.ApiNotSupportedException.RequiredApiLevel">
            <summary>
            The minimal required API level.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.ApiNotSupportedException.RequiredApiVersion">
            <summary>
            The minimal required API version.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.ApiNotSupportedException.MaxApiVersion">
            <summary>
            The maximal supported API version.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ApiVersion">
            <summary>
            Represents the API version.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:System.IComparable`1" />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.ApiVersion"/> struct.
            </summary>
            <param name="major">The major part of the version.</param>
            <param name="minor">The minor part of the version.</param>
            <param name="release">The release part of the version.</param>
        </member>
        <member name="F:QBittorrent.Client.ApiVersion.Major">
            <summary>
            The major part of the version.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ApiVersion.Minor">
            <summary>
            The minor part of the version.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ApiVersion.Release">
            <summary>
            The release part of the version.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.Parse(System.String)">
            <summary>
            Parses the specified version string.
            </summary>
            <param name="versionString">The version string in format major[.minor[.release]]</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.ToString">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.Equals(QBittorrent.Client.ApiVersion)">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.CompareTo(QBittorrent.Client.ApiVersion)">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_Equality(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_Inequality(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_LessThan(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_GreaterThan(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_LessThanOrEqual(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_GreaterThanOrEqual(QBittorrent.Client.ApiVersion,QBittorrent.Client.ApiVersion)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.ApiVersion.op_Implicit(QBittorrent.Client.ApiVersion)~System.Version">
            <summary>
            Performs an implicit conversion from <see cref="T:QBittorrent.Client.ApiVersion"/> to <see cref="T:System.Version"/>.
            </summary>
            <param name="apiVersion">The API version.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:QBittorrent.Client.BittorrentProtocol">
            <summary>
            Bittorrent protocol.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.BittorrentProtocol.Both">
            <summary>
            Both TCP and uTP protocols.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.BittorrentProtocol.Tcp">
            <summary>
            TCP only.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.BittorrentProtocol.uTP">
            <summary>
            uTP only.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.BuildInfo">
            <summary>
            Describes qBittorrent build information.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.QtVersion">
            <summary>
            The version of Qt.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.LibtorrentVersion">
            <summary>
            The version of libtorrent.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.BoostVersion">
            <summary>
            The version of Boost.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.OpenSslVersion">
            <summary>
            The version of OpenSSL.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.ZlibVersion">
            <summary>
            The version of zlib.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.Bitness">
            <summary>
            QBittorrent bitness.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.BuildInfo.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.Category">
            <summary>
            Describes torrent category and the corresponding save path.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Category.Name">
            <summary>
            Category name.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Category.SavePath">
            <summary>
            Category save path.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Category.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ChokingAlgorithm">
            <summary>
            Defines the algorithm to use to determine which peers to unchoke.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ChokingAlgorithm.FixedSlots">
            <summary>
            The traditional choker with a fixed number of unchoke slots.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ChokingAlgorithm.RateBased">
            <summary>
            Opens up unchoke slots based on the upload rate achieved to peers.
            The more slots that are opened, the marginal upload rate required to open up another slot increases.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ConnectionStatus">
            <summary>
            The connection status.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ConnectionStatus.Connected">
            <summary>
            The connected status.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ConnectionStatus.Firewalled">
            <summary>
            The firewalled status.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ConnectionStatus.Disconnected">
            <summary>
            The disconnected status.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.DeprecatedAttribute">
            <summary>
            Annotates the method/property that is not longer supported in the API.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.DeprecatedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.DeprecatedAttribute"/> class.
            </summary>
            <param name="fromVersion">The version from which the support for annotated method/property was dropped.</param>
        </member>
        <member name="P:QBittorrent.Client.DeprecatedAttribute.FromVersion">
            <summary>
             Gets the version from which the support for annotated method/property was dropped.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.DeprecatedAttribute.Description">
            <summary>
            Describes the reason for deprecation and alternative API.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.DynamicDnsService">
            <summary>
            Dynamic DNS Service
            </summary>
        </member>
        <member name="F:QBittorrent.Client.DynamicDnsService.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:QBittorrent.Client.DynamicDnsService.DynDNS">
            <summary>
            DynDSN service <see href="https://dyn.com/dns/"/>
            </summary>
        </member>
        <member name="F:QBittorrent.Client.DynamicDnsService.NoIP">
            <summary>
            No-IP service <see href="https://www.noip.com"/>
            </summary>
        </member>
        <member name="T:QBittorrent.Client.Encryption">
            <summary>
            Torrent transfer encryption preferences.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.Encryption.Prefer">
            <summary>
            Prefer encrypted connections, but allow using unencrypted connections too.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.Encryption.ForceOn">
            <summary>
            Force encrypted connections.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.Encryption.ForceOff">
            <summary>
            Force unencrypted connections.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.GlobalTransferExtendedInfo">
            <summary>
            Represents global transfer info with additional information and statistics.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.AllTimeDownloaded">
            <summary>
            The amount of data downloaded for all time (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.AllTimeUploaded">
            <summary>
            The amount of data uploaded for all time (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.TotalWasted">
            <summary>
            The ammount of data wasted (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.TotalPeerConnections">
            <summary>
            Total number of peer connections
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.TotalBuffersSize">
            <summary>
            Total used buffers size
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.GlobalAltSpeedLimitsEnabled">
            <summary>
            Indicates whether the global alternative speed limits are enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.RefreshInterval">
            <summary>
            The preferred refresh interval (milliseconds)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.FreeSpaceOnDisk">
            <summary>
            Free space on disk.
            </summary>
            <remarks>This value is available starting from API v2.1.1.</remarks>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferExtendedInfo.GlobalRatio">
            <summary>
            Global ratio
            </summary>
        </member>
        <member name="T:QBittorrent.Client.GlobalTransferInfo">
            <summary>
            Represents global transfer info.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.DownloadSpeed">
            <summary>
            Global download rate (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.DownloadedData">
            <summary>
            Data downloaded this session (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.DownloadSpeedLimit">
            <summary>
            Download rate limit (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.UploadSpeed">
            <summary>
            Global upload rate (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.UploadedData">
            <summary>
            Data uploaded this session (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.UploadSpeedLimit">
            <summary>
            Upload rate limit (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.DhtNodes">
            <summary>
            DHT nodes connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.ConnectionStatus">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="P:QBittorrent.Client.GlobalTransferInfo.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.IQBittorrentClient">
            <summary>
            Provides access to qBittorrent remote API.
            </summary>
            <seealso cref="T:QBittorrent.Client.QBittorrentClient"/>
            <seealso cref="T:QBittorrent.Client.QBittorrentClientExtensions"/>
            <seealso cref="T:QBittorrent.Client.IQBittorrentClient2"/>
        </member>
        <member name="P:QBittorrent.Client.IQBittorrentClient.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.IQBittorrentClient.DefaultRequestHeaders">
            <summary>
            Gets the headers which should be sent with each request.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.LoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates this client with the remote qBittorrent server.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.LogoutAsync(System.Threading.CancellationToken)">
            <summary>
            Clears authentication on the remote qBittorrent server.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentListAsync(QBittorrent.Client.TorrentListQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent list.
            </summary>
            <param name="query">The query.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentPropertiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent generic properties.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentContentsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent contents.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentTrackersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent trackers.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentWebSeedsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent web seeds.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentPiecesStatesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the states of the torrent pieces.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentPiecesHashesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the hashes of the torrent pieces.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetGlobalTransferInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global transfer information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetPartialDataAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the partial data.
            </summary>
            <param name="responseId">The response identifier.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetPeerPartialDataAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the peer partial data.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="responseId">The response identifier.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.AddTorrentsAsync(QBittorrent.Client.AddTorrentFilesRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrent files to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.AddTorrentsAsync(QBittorrent.Client.AddTorrentUrlsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrent URLs or magnet-links to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.PauseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Pauses the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.PauseAllAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ResumeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resumes the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ResumeAllAsync(System.Threading.CancellationToken)">
            <summary>
            Resumes all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.AddCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.DeleteCategoriesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes the categories.
            </summary>
            <param name="categories">The list of categories' names.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetTorrentCategoryAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent category.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="category">The category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentDownloadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent download speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetTorrentDownloadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent download speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetTorrentUploadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent upload speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetTorrentUploadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent upload speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetGlobalDownloadLimitAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global download speed limit.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetGlobalDownloadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the global download speed limit.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetGlobalUploadLimitAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global upload speed limit.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetGlobalUploadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the global upload speed limit.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ChangeTorrentPriorityAsync(System.Collections.Generic.IEnumerable{System.String},QBittorrent.Client.TorrentPriorityChange,System.Threading.CancellationToken)">
            <summary>
            Changes the torrent priority.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="change">The priority change.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetFilePriorityAsync(System.String,System.Int32,QBittorrent.Client.TorrentContentPriority,System.Threading.CancellationToken)">
            <summary>
            Sets the file priority.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="fileId">The file identifier.</param>
            <param name="priority">The priority.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="deleteDownloadedData"><see langword="true"/> to delete the downloaded data.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetLocationAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the location of the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="newLocation">The new location.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.RenameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="newName">The new name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.AddTrackersAsync(System.String,System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Adds the trackers to the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="trackers">The trackers.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.RecheckAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rechecks the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetLogAsync(QBittorrent.Client.TorrentLogSeverity,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the server log.
            </summary>
            <param name="severity">The severity of log entries to return. <see cref="F:QBittorrent.Client.TorrentLogSeverity.All"/> by default.</param>
            <param name="afterId">Return the entries with the ID greater than the specified one.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetAlternativeSpeedLimitsEnabledAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the value indicating whether the alternative speed limits are enabled.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ToggleAlternativeSpeedLimitsAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the alternative speed limits.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetAutomaticTorrentManagementAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the automatic torrent management.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetForceStartAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the force start.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetSuperSeedingAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the super seeding.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ToggleFirstLastPiecePrioritizedAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Toggles the first and last piece priority.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ToggleSequentialDownloadAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Toggles the sequential download.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current API version of the server.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>
            <para>
            For qBittorrent versions before 4.1.0 this method returns version <c>1.x</c>
            where <c>x</c> is the value returned by <see cref="M:QBittorrent.Client.IQBittorrentClient.GetLegacyApiVersionAsync(System.Threading.CancellationToken)"/> method.
            </para>
            <para>
            For qBittorrent version starting from 4.1.0 this method returns version <c>x.y</c> or <c>x.y.z</c>
            where <c>x >= 2</c>. 
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetLegacyApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current API version of the server for qBittorrent versions up to 4.0.4.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetLegacyMinApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Get the minimum API version supported by server. Any application designed to work with an API version greater than or equal to the minimum API version is guaranteed to work.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetQBittorrentVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the qBittorrent version.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetDefaultSavePathAsync(System.Threading.CancellationToken)">
            <summary>
            Get the path to the folder where the downloaded files are saved by default.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.GetPreferencesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets qBittorrent preferences.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.SetPreferencesAsync(QBittorrent.Client.Preferences,System.Threading.CancellationToken)">
            <summary>
            Gets qBittorrent preferences.
            </summary>
            <param name="preferences">
            The prefences to set.
            You can set only the properties you want to change and leave the other ones as <see langword="null"/>.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient.ShutdownApplicationAsync(System.Threading.CancellationToken)">
            <summary>
            Quits qBittorrent.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:QBittorrent.Client.IQBittorrentClient2">
            <summary>
            Provides access to qBittorrent remote API.
            </summary>
            <seealso cref="T:QBittorrent.Client.QBittorrentClient"/>
            <seealso cref="T:QBittorrent.Client.QBittorrentClientExtensions"/>
            <seealso cref="T:QBittorrent.Client.IQBittorrentClient2"/>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetPeerLogAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the peer log.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentsAsync(QBittorrent.Client.AddTorrentsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrents to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes all torrents.
            </summary>
            <param name="deleteDownloadedData"><see langword="true"/> to delete the downloaded data.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RecheckAsync(System.Threading.CancellationToken)">
            <summary>
            Rechecks all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RecheckAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Rechecks the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ReannounceAsync(System.Threading.CancellationToken)">
            <summary>
            Reannounces all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ReannounceAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Reannounces the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.PauseAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This method supersedes <see cref="M:QBittorrent.Client.IQBittorrentClient.PauseAllAsync(System.Threading.CancellationToken)"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.PauseAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Pauses the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ResumeAsync(System.Threading.CancellationToken)">
            <summary>
            Resumes all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This method supersedes <see cref="M:QBittorrent.Client.IQBittorrentClient.ResumeAllAsync(System.Threading.CancellationToken)"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ResumeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Resumes the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ChangeTorrentPriorityAsync(QBittorrent.Client.TorrentPriorityChange,System.Threading.CancellationToken)">
            <summary>
            Changes the torrent priority for all torrents.
            </summary>
            <param name="change">The priority change.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetTorrentDownloadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent download speed limit for all torrents.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetTorrentUploadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent upload speed limit for all torrents.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetLocationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the location of all torrents.
            </summary>
            <param name="newLocation">The new location.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetTorrentCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent category for all torrents.
            </summary>
            <param name="category">The category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetAutomaticTorrentManagementAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the automatic torrent management for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ToggleSequentialDownloadAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the sequential download for all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ToggleFirstLastPiecePrioritizedAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the first and last piece priority for all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetForceStartAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the force start for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetSuperSeedingAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the super seeding for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddCategoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category name.</param>
            <param name="savePath">The save path for the torrents belonging to this category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.EditCategoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Changes the category save path.
            </summary>
            <param name="category">The category name.</param>
            <param name="savePath">The save path for the torrents belonging to this category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetCategoriesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all categories.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.EditTrackerAsync(System.String,System.Uri,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Changes tracker URL.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="trackerUrl">The tracker URL you want to edit.</param>
            <param name="newTrackerUrl">The new URL to replace the <paramref name="trackerUrl"/>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteTrackersAsync(System.String,System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Removes the trackers from the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="trackerUrls">The tracker URLs you want to remove.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetFilePriorityAsync(System.String,System.Collections.Generic.IEnumerable{System.Int32},QBittorrent.Client.TorrentContentPriority,System.Threading.CancellationToken)">
            <summary>
            Sets the file priority for multiple files.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="fileIds">The file identifiers.</param>
            <param name="priority">The priority.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="inactiveSeedingTime">
            The inactive seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetNetworkInterfacesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of network interfaces on the qBittorrent machine.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetNetworkInterfaceAddressesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of network interface IP addresses.
            </summary>
            <param name="networkInterfaceId">
            The network interface id to retrieve the IP addresses for.
            If <see langword="null"/> or empty, the result will include IP addresses for all interfaces.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetBuildInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the build information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.BanPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Bans peers.
            </summary>
            <param name="peers">The list of peers to ban. The peers must be in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.BanPeersAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Threading.CancellationToken)">
            <summary>
            Bans peers.
            </summary>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="peers">The list of peers to ban. The peers must be in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.CreateTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates the tags.
            </summary>
            <param name="tags">The list of the tags to create.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes the tags.
            </summary>
            <param name="tags">The list of the tags to delete.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetTagsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of the tags.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetTorrentContentsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent contents.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="indexes">The indexes of the files you want to retrieve.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the tags to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the tags to all torrents.
            </summary>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the specified tags from the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>
            If the list of tags is empty, this method is no op.
            </remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the specified tags from all torrents.
            </summary>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>
            If the list of tags is empty, this method is no op.
            </remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ClearTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes all tags from the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.ClearTorrentTagsAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all tags from all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RenameFileAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the file in the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="fileId">The ID of the file to rename.</param>
            <param name="newName">The new name to use for the file.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This overload is not supported starting from API v2.8.0. Use <see cref="M:QBittorrent.Client.IQBittorrentClient2.RenameFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/> instead.</remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RenameFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the folder of the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="oldPath">The old path of the file.</param>
            <param name="newPath">The new path to use for the file.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This overload is not supported starting until API v2.8.0. Use <see cref="M:QBittorrent.Client.IQBittorrentClient2.RenameFileAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)"/> for earlier API versions instead.</remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RenameFolderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the folder of the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="oldPath">The old path of the folder.</param>
            <param name="newPath">The new path to use for the folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddRssFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the RSS folder.
            </summary>
            <param name="path">Full path of added folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.AddRssFeedAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the RSS feed.
            </summary>
            <param name="url">The URL of the RSS feed.</param>
            <param name="path">The full path of added folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteRssItemAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the RSS folder or feed.
            </summary>
            <param name="path">The full path of removed folder or feed.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.MoveRssItemAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Moves or renames the RSS folder or feed.
            </summary>
            <param name="path">The current full path of the folder or feed.</param>
            <param name="newPath">The new path.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetRssItemsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets all RSS folders and feeds.
            </summary>
            <param name="withData"><see langword="true" /> if you need current feed articles.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.SetRssAutoDownloadingRuleAsync(System.String,QBittorrent.Client.RssAutoDownloadingRule,System.Threading.CancellationToken)">
            <summary>
            Sets the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="rule">The rule definition.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.RenameRssAutoDownloadingRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="newName">The new rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteRssAutoDownloadingRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetRssAutoDownloadingRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the RSS auto-downloading rules.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.MarkRssItemAsReadAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Marks the RSS article as read, if <paramref name="articleId"/> is not <see langword="null" />.
            Otherwise marks the whole RSS feed as read.
            </summary>
            <param name="itemPath">Full path of the item.</param>
            <param name="articleId">ID of the article.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetMatchingRssArticlesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all articles that match a rule by feed name.
            </summary>
            <param name="ruleName">Rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.StartSearchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Starts torrent search job.
            </summary>
            <param name="pattern">Pattern to search for (e.g. "Ubuntu 18.04").</param>
            <param name="plugins">Plugins to use for searching (e.g. "legittorrents").</param>
            <param name="category">
            Categories to limit your search to (e.g. "legittorrents").
            Available categories depend on the specified <paramref name="plugins"/>.
            Also supports <c>&quot;all&quot;</c>
            </param>
            <param name="token">The cancellation token.</param>
            <returns>The ID of the search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.StopSearchAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Stops torrent search job.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetSearchStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of all search jobs.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The list containing statuses and the number of found torrents for each search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetSearchStatusAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the status of the search jobs with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns>The object containing the status and the number of found torrents.</returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetSearchResultsAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the results of the search job with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="offset">Result to start at. A negative number means count backwards (e.g. -2 returns the 2 most recent results).</param>
            <param name="limit">The maximal number of results to return. 0 or negative means no limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DeleteSearchAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes the search job with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetSearchCategoriesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the search categories.
            </summary>
            <param name="plugin">
            Name of the plugin (e.g. "legittorrents").
            Also supports <see cref="F:QBittorrent.Client.SearchPlugin.All"/> and <see cref="F:QBittorrent.Client.SearchPlugin.Enabled"/>.
            </param>
            <param name="token">The cancellation token.</param>
            <returns>The list of the search categories.</returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.GetSearchPluginsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the installed search plugins.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The list of the search plugins.</returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.InstallSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Installs the search plugins.
            </summary>
            <param name="sources">URLs of the plugins to install.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>Plugins can be installed from the local file system using <c>file:///</c> URIs as <paramref name="sources"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.UninstallSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Uninstalls the search plugins.
            </summary>
            <param name="names">Names of the plugins to uninstall.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.EnableSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Enables the search plugins.
            </summary>
            <param name="names">Names of the plugins to enable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.DisableSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Disables the search plugins.
            </summary>
            <param name="names">Names of the plugins to disable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.IQBittorrentClient2.UpdateSearchPluginsAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the search plugins.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:QBittorrent.Client.MaxRatioAction">
            <summary>
            The action that is performed when <see cref="P:QBittorrent.Client.Preferences.MaxRatio"/> is reached.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.MaxRatioAction.Pause">
            <summary>
            Pause torrent.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.MaxRatioAction.Remove">
            <summary>
            Remove torrent.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.NetInterface">
            <summary>
            Represent information about a network interface.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.NetInterface.Id">
            <summary>
            Gets or sets the internal network interface identifier.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.NetInterface.Name">
            <summary>
            Gets or sets the network interface name.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.NetInterface.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.PartialData">
            <summary>
            Represents full or partial data returned by <see cref="M:QBittorrent.Client.QBittorrentClient.GetPartialDataAsync(System.Int32,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.ResponseId">
            <summary>
            Gets or sets the response identifier.
            </summary>
            <value>
            The response identifier.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PartialData.FullUpdate">
            <summary>
            Gets or sets a value indicating whether this object contains all data.
            </summary>
            <value>
              <see langword="true" /> if this object contains all data; 
              <see langword="false" /> if this object contains only changes of data since the previous request.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PartialData.TorrentsChanged">
            <summary>
            Gets or sets the list of changed or added torrents.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.TorrentsRemoved">
            <summary>
            Gets or sets the list of removed torrents.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.CategoriesAdded">
            <summary>
            Gets or sets the list of added categories.
            </summary>
            <remarks>
            Starting from API v2.1.0 this property will always be <see langword="null"/>.
            You should use <see cref="P:QBittorrent.Client.PartialData.CategoriesChanged"/> property instead.
            </remarks>
            <seealso cref="P:QBittorrent.Client.PartialData.CategoriesChanged"/>
        </member>
        <member name="P:QBittorrent.Client.PartialData.CategoriesChanged">
            <summary>
            Gets or sets the changed categories with their save paths.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.CategoriesRemoved">
            <summary>
            Gets or sets the list of removed categories.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.TagsAdded">
            <summary>
            Get or sets the list of added tags.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.TagsRemoved">
            <summary>
            Get or sets the list of removed tags.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.Queueing">
            <summary>
            Priority system usage flag
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.ServerState">
            <summary>
            Gets or sets the state of the server.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PartialData.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.PeerAddResult">
            <summary>
            Represents the result of <see cref="M:QBittorrent.Client.IQBittorrentClient2.AddTorrentPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/> operation.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerAddResult.Added">
            <summary>
            The number of added peers.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerAddResult.Failed">
            <summary>
            The number of peers that cannot be added.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.PeerLogEntry">
            <summary>
            Represents QBittorrent peer log entry.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerLogEntry.Id">
            <summary>
            Gets or sets the ID of the peer.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerLogEntry.Address">
            <summary>
            Gets or sets the IP address of the peer.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerLogEntry.Timestamp">
            <summary>
            Gets or sets the timestamp (milliseconds since epoch).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerLogEntry.Blocked">
            <summary>
            Gets or sets a value indicating whether the peer was blocked.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerLogEntry.Reason">
            <summary>
            Gets or sets the reason of the block.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.PeerPartialData">
            <summary>
            Represents full or partial data returned by <see cref="M:QBittorrent.Client.QBittorrentClient.GetPeerPartialDataAsync(System.String,System.Int32,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.ResponseId">
            <summary>
            Gets or sets the response identifier.
            </summary>
            <value>
            The response identifier.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.FullUpdate">
            <summary>
            Gets or sets a value indicating whether this object contains all data.
            </summary>
            <value>
              <see langword="true" /> if this object contains all data; 
              <see langword="false" /> if this object contains only changes of data since the previous request.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.ShowFlags">
            <summary>
            Gets or sets a value indicating whether flags must be shown.
            </summary>
            <value>
              <see langword="true" /> if flags must be shown; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.PeersChanged">
            <summary>
            Gets or sets the changed and new peers.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.PeersRemoved">
            <summary>
            Gets or sets the removed peers.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialData.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.PeerPartialInfo">
            <summary>
            Provides the full or partial information about a torrent peer.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Address">
            <summary>
            Gets or sets the peer IP address.
            </summary>
            <value>
            The peer IP address.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Client">
            <summary>
            Gets or sets the peer client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.DownloadSpeed">
            <summary>
            Gets or sets the download speed.
            </summary>
            <value>
            The download speed.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.UploadSpeed">
            <summary>
            Gets or sets the upload speed.
            </summary>
            <value>
            The upload speed.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Downloaded">
            <summary>
            Gets or sets the amount of downloaded data.
            </summary>
            <value>
            The amount of downloaded data.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Uploaded">
            <summary>
            Gets or sets the amount of uploaded data.
            </summary>
            <value>
            The amount of uploaded data.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.ConnectionType">
            <summary>
            Gets or sets the type of the connection.
            </summary>
            <value>
            The type of the connection.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.FlagsDescription">
            <summary>
            Gets or sets the flags description.
            </summary>
            <value>
            The flags description.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Relevance">
            <summary>
            Gets or sets the relevance.
            </summary>
            <value>
            The relevance.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Files">
            <summary>
            Gets or sets the files.
            </summary>
            <value>
            The files.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:QBittorrent.Client.PeerPartialInfo.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.Preferences">
            <summary>
            qBittorrent application preferences.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.Locale">
            <summary>
            Currently selected language
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SavePath">
            <summary>
            Default save path for torrents, separated by slashes
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.TempPathEnabled">
            <summary>
            True if folder for incomplete torrents is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.TempPath">
            <summary>
            Path for incomplete torrents, separated by slashes
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ScanDirectories">
            <summary>
            List of watch folders to add torrent automatically.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ExportDirectory">
            <summary>
            Path to directory to copy .torrent files.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ExportDirectoryForFinished">
            <summary>
            Path to directory to copy finished .torrent files
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationEnabled">
            <summary>
            True if e-mail notification should be enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationEmailAddress">
            <summary>
            E-mail address to send notifications to.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationSmtpServer">
            <summary>
            SMTP server for e-mail notifications.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationSslEnabled">
            <summary>
            True if SMTP server requires SSL connection.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationAuthenticationEnabled">
            <summary>
            True if SMTP server requires authentication
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationUsername">
            <summary>
            Username for SMTP authentication.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationPassword">
            <summary>
            Password for SMTP authentication.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutorunEnabled">
            <summary>
            True if external program should be run after torrent has finished downloading.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutorunProgram">
            <summary>
            Program path/name/arguments to run if <see cref="P:QBittorrent.Client.Preferences.AutorunEnabled"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.PreallocateAll">
            <summary>
            True if file preallocation should take place, otherwise sparse files are used.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.QueueingEnabled">
            <summary>
            True if torrent queuing is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxActiveDownloads">
            <summary>
            Maximum number of active simultaneous downloads
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxActiveTorrents">
            <summary>
            Maximum number of active simultaneous downloads and uploads
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxActiveUploads">
            <summary>
            Maximum number of active simultaneous uploads
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DoNotCountSlowTorrents">
            <summary>
            If true torrents w/o any activity (stalled ones) will not be counted towards max_active_* limits.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxRatioEnabled">
            <summary>
            True if share ratio limit is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxRatio">
            <summary>
            Get the global share ratio limit
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxRatioAction">
            <summary>
            Action performed when a torrent reaches the maximum share ratio.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxSeedingTime">
            <summary>
            Maximal seeding time in minutes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxSeedingTimeEnabled">
            <summary>
            True if maximal seeding time is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxInactiveSeedingTime">
            <summary>
            Maximal inactive seeding time in minutes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxInactiveSeedingTimeEnabled">
            <summary>
            True if maximal inactive seeding time is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AppendExtensionToIncompleteFiles">
            <summary>
            If true <c>.!qB</c> extension will be appended to incomplete files.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ListenPort">
            <summary>
            Port for incoming connections.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.UpnpEnabled">
            <summary>
            True if UPnP/NAT-PMP is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RandomPort">
            <summary>
            True if the port is randomly selected
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DownloadLimit">
            <summary>
            Global download speed limit in KiB/s; -1 means no limit is applied.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.UploadLimit">
            <summary>
            Global upload speed limit in KiB/s; -1 means no limit is applied.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxConnections">
            <summary>
            Maximum global number of simultaneous connections.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxConnectionsPerTorrent">
            <summary>
            Maximum number of simultaneous connections per torrent.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxUploads">
            <summary>
            Maximum number of upload slots.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MaxUploadsPerTorrent">
            <summary>
            Maximum number of upload slots per torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.EnableUTP">
            <summary>
            True if uTP protocol should be enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LimitUTPRate">
            <summary>
            True if <see cref="P:QBittorrent.Client.Preferences.DownloadLimit"/> and <see cref="P:QBittorrent.Client.Preferences.UploadLimit"/> should be applied to uTP connections.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LimitTcpOverhead">
            <summary>
            True if <see cref="P:QBittorrent.Client.Preferences.DownloadLimit"/> and <see cref="P:QBittorrent.Client.Preferences.UploadLimit"/>
            should be applied to estimated TCP overhead (service data: e.g. packet headers).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AlternativeDownloadLimit">
            <summary>
            Alternative global download speed limit in KiB/s
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AlternativeUploadLimit">
            <summary>
            Alternative global upload speed limit in KiB/s
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SchedulerEnabled">
            <summary>
            True if alternative limits should be applied according to schedule
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ScheduleFromHour">
            <summary>
            Scheduler starting hour.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ScheduleFromMinute">
            <summary>
            Scheduler starting minute.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ScheduleToHour">
            <summary>
            Scheduler ending hour.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ScheduleToMinute">
            <summary>
            Scheduler ending minute.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SchedulerDays">
            <summary>
            Scheduler days.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DHT">
            <summary>
            True if DHT is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DHTSameAsBT">
            <summary>
            True if DHT port should match TCP port
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DHTPort">
            <summary>
            DHT port if <see cref="P:QBittorrent.Client.Preferences.DHTSameAsBT"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.PeerExchange">
            <summary>
            True if peer exchange PeX is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LocalPeerDiscovery">
            <summary>
            True if local peer discovery is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.Encryption">
            <summary>
            Encryption mode.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AnonymousMode">
            <summary>
            If true anonymous mode will be enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyType">
            <summary>
            Proxy type.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyAddress">
            <summary>
            Proxy IP address or domain name.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyPort">
            <summary>
            Proxy port.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyPeerConnections">
            <summary>
            True if peer and web seed connections should be proxified.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ForceProxy">
            <summary>
            True if the connections not supported by the proxy are disabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyTorrentsOnly">
            <summary>
            True if proxy should be used only for torrents.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyAuthenticationEnabled">
            <summary>
            True if proxy requires authentication; doesn't apply to SOCKS4 proxies.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyUsername">
            <summary>
            Username for proxy authentication.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyPassword">
            <summary>
            Password for proxy authentication.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyHostnameLookup">
            <summary>
            True if proxy should be used to perform hostname lookup.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyBittorrent">
            <summary>
            True if proxy should be used for BitTorrent purposes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyMisc">
            <summary>
            True if proxy should be used for general purposes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ProxyRss">
            <summary>
            True if proxy should be used for RSS purposes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.IpFilterEnabled">
            <summary>
            True if external IP filter should be enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.IpFilterPath">
            <summary>
            Path to IP filter file (.dat, .p2p, .p2b files are supported).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.IpFilterTrackers">
            <summary>
            True if IP filters are applied to trackers
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIAddress">
            <summary>
            WebUI IP address. Use <c>*</c> to accept connections on any IP address.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIPort">
            <summary>
            WebUI port.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIDomain">
            <summary>
            WebUI domain. Use <c>*</c> to accept connections on any domain.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIUpnp">
            <summary>
            True if UPnP is used for the WebUI port.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIUsername">
            <summary>
            WebUI username
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIPassword">
            <summary>
            WebUI password. 
            </summary>
            <remarks>
            This property should be used for setting password.
            If a <see cref="T:QBittorrent.Client.Preferences"/> object is retrieved as server response, this property will be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIPasswordHash">
            <summary>
            MD5 hash of WebUI password. 
            </summary>
            <remarks>
            This property can be used to get the MD5 hash of the current WebUI password.
            It is ignored when sending requests to the server.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIHttps">
            <summary>
            True if WebUI HTTPS access is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISslKey">
            <summary>
            SSL keyfile contents (this is a not a path).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISslCertificate">
            <summary>
            SSL certificate contents (this is a not a path).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIClickjackingProtection">
            <summary>
            True if WebUI clickjacking protection is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUICsrfProtection">
            <summary>
            True if WebUI CSRF protection is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISecureCookie">
            <summary>
            True if Secure attribute is set on cookie when using HTTPS
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIMaxAuthenticationFailures">
            <summary>
            The number of the failed authentication attempt after which the client will be banned.
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.WebUIBanDuration"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIBanDuration">
            <summary>
            The duration (in seconds) the client will be banned for after <see cref="P:QBittorrent.Client.Preferences.WebUIMaxAuthenticationFailures"/> failed authentication attempts.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUICustomHttpHeadersEnabled">
            <summary>
            True if custom HTTP headers are enabled for Web UI.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUICustomHttpHeaders">
            <summary>
            Custom HTTP headers to be used for Web UI.
            </summary>
            <remarks>
            Each header must be specified as a key-value pair separated by a colon, i.e.<c>HEADER:VALUE</c>. The headers must be separated by a new-line character (<c>\n</c>).
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.BypassLocalAuthentication">
            <summary>
            True if authentication challenge for loopback address (127.0.0.1) should be disabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.BypassAuthenticationSubnetWhitelistEnabled">
            <summary>
            True if webui authentication should be bypassed for clients whose ip resides within (at least) one of the subnets on the whitelist.
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.BypassAuthenticationSubnetWhitelist"/>
            <seealso cref="P:QBittorrent.Client.Preferences.BypassLocalAuthentication"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.BypassAuthenticationSubnetWhitelist">
            <summary>
            (White)list of ipv4/ipv6 subnets for which webui authentication should be bypassed.
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.BypassAuthenticationSubnetWhitelistEnabled"/>
            <seealso cref="P:QBittorrent.Client.Preferences.BypassLocalAuthentication"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DynamicDnsEnabled">
            <summary>
            True if server DNS should be updated dynamically.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DynamicDnsService">
            <summary>
            Dynamic DNS service.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DynamicDnsUsername">
            <summary>
            Username for DDNS service.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DynamicDnsPassword">
            <summary>
            Password for DDNS service.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.DynamicDnsDomain">
            <summary>
            Your DDNS domain name.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssRefreshInterval">
            <summary>
            RSS refresh interval.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssMaxArticlesPerFeed">
            <summary>
            Max stored articles per RSS feed.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssProcessingEnabled">
            <summary>
            Enable processing of RSS feeds.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssAutoDownloadingEnabled">
            <summary>
            Enable auto-downloading of torrents from the RSS feeds.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssDownloadRepackProperEpisodes">
            <summary>
            Enables downloading REPACK/PROPER episodes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RssSmartEpisodeFilters">
            <summary>
            Smart episode filters.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AdditionalTrackersEnabled">
            <summary>
            True if additional trackers are enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AdditinalTrackers">
            <summary>
            The list of addional trackers.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.BannedIpAddresses">
            <summary>
            The list of banned IP addresses.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.BittorrentProtocol">
            <summary>
            Bittorrent protocol.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.CreateTorrentSubfolder">
            <summary>
            True if a subfolder should be created when adding a torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AddTorrentPaused">
            <summary>
            True if torrents should be added in a Paused state
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.TorrentFileAutoDeleteMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutoTMMEnabledByDefault">
            <summary>
            True if Automatic Torrent Management is enabled by default
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutoTMMRetainedWhenCategoryChanges">
            <summary>
            True if torrent should be relocated when its category changes
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutoTMMRetainedWhenDefaultSavePathChanges">
            <summary>
            True if torrent should be relocated when the default save path changes
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AutoTMMRetainedWhenCategorySavePathChanges">
            <summary>
            True if torrent should be relocated when its category's save path changes
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.MailNotificationSender">
            <summary>
            E-mail where notifications should originate from
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LimitLAN">
            <summary>
            True if <see cref="P:QBittorrent.Client.Preferences.DownloadLimit" /> and <seealso cref="P:QBittorrent.Client.Preferences.UploadLimit"/> should be applied to peers on the LAN
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SlowTorrentDownloadRateThreshold">
            <summary>
            Download rate in KiB/s for a torrent to be considered "slow"
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SlowTorrentUploadRateThreshold">
            <summary>
            Upload rate in KiB/s for a torrent to be considered "slow"
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SlowTorrentInactiveTime">
            <summary>
            Time in seconds a torrent should be inactive before considered "slow"
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AlternativeWebUIEnabled">
            <summary>
            True if an alternative WebUI should be used
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AlternativeWebUIPath">
            <summary>
            File path to the alternative WebUI
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUIHostHeaderValidation">
            <summary>
            True if WebUI host header validation is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISslKeyPath">
            <summary>
            SSL key file path on the server.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISslCertificatePath">
            <summary>
            SSL certificate file path on the server.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.WebUISessionTimeout">
            <summary>
            Web UI session timeout in seconds
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.CurrentNetworkInterface">
            <summary>
            Specifies which network interfaces qBittorrent listens on.
            On multi-nic systems (e.g. device has an ethernet port and wifi)
            you may limit which interface should be used to send and transmit data.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.CurrentInterfaceAddress">
            <summary>
            Current network interface address
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ListenOnIPv6Address">
            <summary>
            Allows qBittorrent to listen on IPv6 address in addition to the old, standard IPv4.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.SaveResumeDataInterval">
            <summary>
            Duration in minutes on which the resume data is saved to the disk.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.RecheckCompletedTorrents">
            <summary>
            When enabled, after the torrent is completely downloaded a recheck operation is performed on the torrent.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.ResolvePeerCountries">
            <summary>
            When enabled, qBittorrent tries to lookup the originating country of each peer using GeoIP database.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentAsynchronousIOThreads">
            <summary>
            I/O threads that <c>libtorrent</c> will use.
            </summary>
            <remarks>
            The number of threads actually used for SHA-1 hashing is n/4 (where n is the value of the setting),
            so for maximum performance, especially during torrent recheck,
            this setting should be set to 4 times the number of hardware threads on your machine.
            So for example, if your CPU is 4c/4t or 2c/4t, set this to 16, if your CPU is 4c/8t or 8c/8t set this to 32, etc.
            It is unlikely that setting this any higher than this will bring a performance benefit.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentFilePoolSize">
            <summary>
            The upper limit on the total number of files the session will keep open.
            </summary>
            <remarks>
            The reason why files are left open at all is that some anti virus software
            hooks on every file close, and scans the file for viruses.
            Deferring the closing of the files will be the difference between a usable system and a completely hogged down system.
            Most operating systems also has a limit on the total number of file descriptors a process may have open.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentOutstandingMemoryWhenCheckingTorrent">
            <summary>
            The amount of memory (in MiB) to use when checking torrents. Higher numbers give faster rechecks but use more memory.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentDiskCache">
            <summary>
            Amount of data (in MiB) that will remain in RAM before being written to disk.
            If set to <c>0</c>, no data will be kept in RAM and instead it will be immediately written to disk (you might see performance impact.)
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentDiskCacheExpiryInterval"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentDiskCacheExpiryInterval">
            <summary>
            The number of seconds from the last cached write to a piece in the write cache, to when it's forcefully flushed to disk.
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentDiskCache"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentUseOSCache">
            <summary>
            When enabled, files are opened normally, with the OS caching reads and writes.
            </summary>
            <remarks>
            Enable for better performance, disable if you also disabled libtorrent's read cache,
            or to help preventing the operating system from growing its file cache indefinitely,
            or if you want to prevent qbittorrent from potentially evicting all other processes' cache
            (which may result in lower perceived system responsiveness).
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentCoalesceReadsAndWrites">
            <summary>
            When enabled, qbittorrent will allocate separate, contiguous, buffers for read and write calls.
            </summary>
            <remarks>
            Only used where writev/readv cannot be used, and will use more RAM but may improve performance.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentPieceExtentAffinity">
            <summary>
            When this is <see langword="true" />, create an affinity for downloading 4 MiB extents of adjacent pieces.
            </summary>
            <remarks>
            This is an attempt to achieve better disk I/O throughput by downloading larger extents of bytes, for torrents with small piece sizes.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentSendUploadPieceSuggestions">
            <summary>
            Controls whether or not libtorrent will send out suggest messages to create a bias of its peers to request certain pieces.
            If enabled, libtorrent will send out suggest messages for the most recent pieces that are in the read cache.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermark">
            <summary>
            The upper limit for the send buffer size in kiB.
            </summary>
            <remarks>
            If the send buffer has fewer bytes than this, another 16kiB block will be read into it.
            If set too small, upload rate capacity will suffer. If set too high, memory will be wasted.
            The actual watermark may be lower than this in case the upload rate is low.
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferLowWatermark"/>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermarkFactor"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentSendBufferLowWatermark">
            <summary>
            The minimum send buffer target size in kiB.
            </summary>
            <remarks>
            <para>
            Send buffer includes bytes pending being read from disk.
            </para>
            <para>
            For good and snappy seeding performance, set this fairly high, to at least fit a few blocks.
            This is essentially the initial window size which will determine how fast we can ramp up the send rate.
            </para>
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermark"/>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermarkFactor"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermarkFactor">
            <summary>
            The send buffer watermark factor in percent.
            </summary>
            <remarks>
            The current upload rate to a peer is multiplied by this factor (in percent) to get the send buffer watermark.
            This product is clamped to the <see cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermark"/> setting so as to not exceed the max.
            For high speed upload, this should be set to a greater value than 100.
            For high capacity connections, setting this higher can improve upload performance and disk throughput.
            Setting it too high may waste RAM and create a bias towards read jobs over write jobs.
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferWatermark"/>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentSendBufferLowWatermark"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentSocketBacklogSize">
            <summary>
            The number of outstanding incoming connections to queue up while we're not actively waiting for a connection to be accepted.
            </summary>
            <remarks>
            The default is 5 which should be sufficient for any normal client.
            If this is a high performance server which expects to receive a lot of connections,
            or used in a simulator or test, it might make sense to raise this number.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMin">
            <summary>
            The start of the range of ports to use for binding outgoing connections to.
            </summary>
            <remarks>
            <para>
            This property together with <see cref="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMax"/> defines the range of ports to use for binding outgoing connections to.
            The range shouldn't be too small.
            </para>
            <para>
            The value of <c>0</c> disables this setting.
            </para>
            <para>
            Setting outgoing ports will limit the ability to keep multiple connections to the same client, even for different torrents.
            It is not recommended to change this setting.
            Its main purpose is to use it as an escape hatch for cheap routers with QoS capability but can only classify flows based on port numbers.
            It is a range instead of a single port because of the problems with failing to reconnect to peers
            if a previous socket to that peer and port is in the waiting state.
            </para>
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMax"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMax">
            <summary>
            The end of the range of ports to use for binding outgoing connections to.
            </summary>
            <remarks>
            <para>
            This property together with <see cref="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMin"/> defines the range of ports to use for binding outgoing connections to.
            The range shouldn't be too small.
            </para>
            <para>
            The value of <c>0</c> disables this setting.
            </para>
            <para>
            Setting outgoing ports will limit the ability to keep multiple connections to the same client, even for different torrents.
            It is not recommended to change this setting.
            Its main purpose is to use it as an escape hatch for cheap routers with QoS capability but can only classify flows based on port numbers.
            It is a range instead of a single port because of the problems with failing to reconnect to peers
            if a previous socket to that peer and port is in the waiting state.
            </para>
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentOutgoingPortsMin"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentUtpTcpMixedModeAlgorithm">
            <summary>
            Determines how to treat TCP connections when there are uTP connections.
            </summary>
            <remarks>
            <para>
            Since uTP is designed to yield to TCP, there's an inherent problem when using swarms that have both TCP and uTP connections.
            If nothing is done, uTP connections would often be starved out for bandwidth by the TCP connections.
            This mode is called <see cref="F:QBittorrent.Client.UtpTcpMixedModeAlgorithm.PreferTcp"/> in qBittorrent.
            </para>
            The <see cref="F:QBittorrent.Client.UtpTcpMixedModeAlgorithm.PeerProportional"/> mode on the other hand,
            simply looks at the current throughput
            and rate limits all TCP connections to their proportional share based on how many of the connections are TCP.
            This works best if uTP connections are not rate limited by the global rate limiter.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentAllowMultipleConnectionsFromSameIp">
            <summary>
            Determines if connections from the same IP address as existing connections should be rejected or not.
            </summary>
            <remarks>
            This option is disabled by default to prevent abusive behavior by peers.
            It may be useful to allow such connections in cases where simulations are run on the same machine,
            and all peers in a swarm has the same IP address.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentEnableEmbeddedTracker">
            <summary>
            Enable qbittorrent's tracker functionality.
            </summary>
            <remarks>
            It is not a fully-featured bittorrent tracker, but it supports the basic features need for sharing a few torrents.
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentEmbeddedTrackerPort"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentEmbeddedTrackerPort">
            <summary>
            The port the embedded tracker should listen on.
            </summary>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentEnableEmbeddedTracker"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentUploadSlotsBehavior">
            <summary>
            Specifies which algorithm to use to determine which peers to unchoke.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentUploadChokingAlgorithm">
            <summary>
            Controls the seeding unchoke behavior.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentStrictSuperSeeding">
            <summary>
            Activate libtorrent's strict mode for super seeding.
            </summary>
            <remarks>
            When this is set to <see langword="true"/>, a piece has to have been forwarded to a third peer before another one is handed out.
            This is the traditional definition of super seeding.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentAnnounceToAllTrackers">
            <summary>
            Controls how multi tracker torrents are treated.
            </summary>
            <remarks>
            If this is set to <see langword="true"/>, all trackers in the same tier are announced to in parallel.
            If all trackers in tier 0 fails, all trackers in tier 1 are announced as well.
            Otherwise the behavior is as defined by the multi tracker specification.
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentAnnounceToAllTiers"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentAnnounceToAllTiers">
            <summary>
            Controls how multi tracker torrents are treated.
            </summary>
            <remarks>
            When this is set to <see langword="true"/>, one tracker from each tier is announced to.
            This is the uTorrent behavior. This is false by default in order to comply with the multi-tracker specification.
            </remarks>
            <seealso cref="P:QBittorrent.Client.Preferences.LibtorrentAnnounceToAllTrackers"/>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentAnnounceIp">
            <summary>
            The ip address passed along to trackers. If this value is blank, the parameter will be omitted.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentStopTrackerTimeout">
            <summary>
            The number of seconds to wait when sending a stopped message before considering a tracker to have timed out.
            </summary>
            <remarks>
            This is usually shorter, to make the client quit faster. If the value is set to 0, the connections to trackers with the stopped event are suppressed.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.Preferences.LibtorrentMaxConcurrentHttpAnnounces">
            <summary>
            Limits the number of concurrent HTTP tracker announces. Once the limit is hit, tracker requests are queued and issued when an outstanding announce completes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.TorrentContentLayout">
            <summary>
            The default torrent content layout.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.Preferences.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ProxyTypeConverter">
            <summary>
            JSON converter for the <see cref="T:QBittorrent.Client.ProxyType"/> preference.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.ProxyTypeConverter.#ctor(QBittorrent.Client.ApiVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.ProxyTypeConverter"/> class.
            </summary>
            <param name="apiVersion">qBittorrent API version.</param>
        </member>
        <member name="M:QBittorrent.Client.ProxyTypeConverter.CanConvert(System.Type)">
            <summary>
            Indicates whether this converter can write a type to JSON.
            </summary>
            <param name="type">The type.</param>
            <returns>True if <paramref name="type"/> is nullable <see cref="T:QBittorrent.Client.ProxyType"/>.</returns>
        </member>
        <member name="P:QBittorrent.Client.ProxyTypeConverter.CanRead">
            <summary>
            Indicates whether this converter can read JSON.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="M:QBittorrent.Client.ProxyTypeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a value from JSON.
            </summary>
            <exception cref="T:System.NotImplementedException">This converter is not capable of reading JSON.</exception>
        </member>
        <member name="M:QBittorrent.Client.ProxyTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a value to JSON.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ProxyType">
            <summary>
            Proxy server type.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.None">
            <summary>
            Proxy is not used.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.Http">
            <summary>
            HTTP proxy without authentication
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.Socks5">
            <summary>
            SOCKS5 proxy without authentication
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.HttpAuth">
            <summary>
            HTTP proxy with authentication
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.Socks5Auth">
            <summary>
            SOCKS5 proxy with authentication
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ProxyType.Socks4">
            <summary>
            SOCKS4 proxy without authentication
            </summary>
        </member>
        <member name="T:QBittorrent.Client.QBittorrentClient">
            <summary>
            Provides access to qBittorrent remote API.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:QBittorrent.Client.IQBittorrentClient"/>
            <seealso cref="T:QBittorrent.Client.QBittorrentClientExtensions"/>
        </member>
        <member name="F:QBittorrent.Client.QBittorrentClient.NewApiLegacyFallbackVersion">
            <summary>
            The legacy API version returned by qBittorrent 4.2 or later.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.QBittorrentClient"/> class.
            </summary>
            <param name="uri">qBittorrent remote server URI.</param>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.#ctor(System.Uri,QBittorrent.Client.ApiLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.QBittorrentClient"/> class.
            </summary>
            <param name="uri">qBittorrent remote server URI.</param>
            <param name="apiLevel">qBittorrent API level.</param>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.#ctor(System.Uri,System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.QBittorrentClient"/> class.
            </summary>
            <param name="uri">qBittorrent remote server URI.</param>
            <param name="handler">Custom HTTP message handler.</param>
            <param name="disposeHandler">The value indicating whether the <paramref name="handler"/> must be disposed when disposing this object.</param>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.#ctor(System.Uri,QBittorrent.Client.ApiLevel,System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.QBittorrentClient"/> class.
            </summary>
            <param name="uri">qBittorrent remote server URI.</param>
            <param name="apiLevel">qBittorrent API level.</param>
            <param name="handler">Custom HTTP message handler.</param>
            <param name="disposeHandler">The value indicating whether the <paramref name="handler"/> must be disposed when disposing this object.</param>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.#ctor(System.Uri,QBittorrent.Client.ApiLevel,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.QBittorrentClient"/> class.
            </summary>
            <param name="uri">The qBittorrent remote server URI.</param>
            <param name="apiLevel">The qBittorrent API level.</param>
            <param name="client">Custom <see cref="T:System.Net.Http.HttpClient"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> or <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:QBittorrent.Client.QBittorrentClient.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.QBittorrentClient.DefaultRequestHeaders">
            <summary>
            Gets the headers which should be sent with each request.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.LoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates this client with the remote qBittorrent server.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.LogoutAsync(System.Threading.CancellationToken)">
            <summary>
            Clears authentication on the remote qBittorrent server.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current API version of the server.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>
            <para>
            For qBittorrent versions before 4.1.0 this method returns version <c>1.x</c>
            where <c>x</c> is the value returned by <see cref="M:QBittorrent.Client.QBittorrentClient.GetLegacyApiVersionAsync(System.Threading.CancellationToken)"/> method.
            </para>
            <para>
            For qBittorrent version starting from 4.1.0 this method returns version <c>x.y</c> or <c>x.y.z</c>
            where <c>x >= 2</c>. 
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetLegacyApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current API version of the server for qBittorrent versions up to 4.0.4.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>
            Starting from version 4.2 qBittorrent does not return a legacy version.
            But in order to retain compatibility, this library will return <see cref="F:QBittorrent.Client.QBittorrentClient.NewApiLegacyFallbackVersion"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetLegacyMinApiVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Get the minimum API version supported by server. Any application designed to work with an API version greater than or equal to the minimum API version is guaranteed to work.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>
            Starting from version 4.2 qBittorrent does not return a legacy version.
            But in order to retain compatibility, this library will return <see cref="F:QBittorrent.Client.QBittorrentClient.NewApiLegacyFallbackVersion"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetQBittorrentVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the qBittorrent version.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentListAsync(QBittorrent.Client.TorrentListQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent list.
            </summary>
            <param name="query">The query.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentPropertiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent generic properties.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentContentsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent contents.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentContentsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent contents.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="indexes">The indexes of the files you want to retrieve.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentTrackersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent trackers.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentWebSeedsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent web seeds.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentPiecesStatesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the states of the torrent pieces.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentPiecesHashesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the hashes of the torrent pieces.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetGlobalTransferInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global transfer information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetPartialDataAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the partial data.
            </summary>
            <param name="responseId">The response identifier.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetPeerPartialDataAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the peer partial data.
            </summary>
            <param name="hash"></param>
            <param name="responseId">The response identifier.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetDefaultSavePathAsync(System.Threading.CancellationToken)">
            <summary>
            Get the path to the folder where the downloaded files are saved by default.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentsAsync(QBittorrent.Client.AddTorrentFilesRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrent files to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentsAsync(QBittorrent.Client.AddTorrentUrlsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrent URLs or magnet-links to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.PauseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Pauses the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.PauseAllAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>This method is obsolete. Use <see cref="M:QBittorrent.Client.QBittorrentClient.PauseAsync(System.Threading.CancellationToken)"/> method instead.</remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ResumeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resumes the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ResumeAllAsync(System.Threading.CancellationToken)">
            <summary>
            Resumes all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <remarks>This method is obsolete. Use <see cref="M:QBittorrent.Client.QBittorrentClient.ResumeAsync(System.Threading.CancellationToken)"/> method instead.</remarks>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteCategoriesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes the categories.
            </summary>
            <param name="categories">The list of categories' names.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentCategoryAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent category.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="category">The category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentDownloadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent download speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentDownloadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent download speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTorrentUploadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the torrent upload speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentUploadLimitAsync(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent upload speed limit.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetGlobalDownloadLimitAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global download speed limit.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetGlobalDownloadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the global download speed limit.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetGlobalUploadLimitAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global upload speed limit.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetGlobalUploadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the global upload speed limit.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ChangeTorrentPriorityAsync(System.Collections.Generic.IEnumerable{System.String},QBittorrent.Client.TorrentPriorityChange,System.Threading.CancellationToken)">
            <summary>
            Changes the torrent priority.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="change">The priority change.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetFilePriorityAsync(System.String,System.Int32,QBittorrent.Client.TorrentContentPriority,System.Threading.CancellationToken)">
            <summary>
            Sets the file priority.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="fileId">The file identifier.</param>
            <param name="priority">The priority.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="deleteDownloadedData"><see langword="true"/> to delete the downloaded data.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetLocationAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the location of the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="newLocation">The new location.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RenameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="newName">The new name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTrackersAsync(System.String,System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Adds the trackers to the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="trackers">The trackers.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RecheckAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rechecks the torrent.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetLogAsync(QBittorrent.Client.TorrentLogSeverity,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the server log.
            </summary>
            <param name="severity">The severity of log entries to return. <see cref="F:QBittorrent.Client.TorrentLogSeverity.All"/> by default.</param>
            <param name="afterId">Return the entries with the ID greater than the specified one.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetAlternativeSpeedLimitsEnabledAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the value indicating whether the alternative speed limits are enabled.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ToggleAlternativeSpeedLimitsAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the alternative speed limits.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetAutomaticTorrentManagementAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the automatic torrent management.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetForceStartAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the force start.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetSuperSeedingAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the super seeding asynchronous.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ToggleFirstLastPiecePrioritizedAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Toggles the first and last piece priority.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ToggleSequentialDownloadAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Toggles the sequential download.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetPreferencesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets qBittorrent preferences.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetPreferencesAsync(QBittorrent.Client.Preferences,System.Threading.CancellationToken)">
            <summary>
            Gets qBittorrent preferences.
            </summary>
            <param name="preferences">
            The prefences to set.
            You can set only the properties you want to change and leave the other ones as <see langword="null"/>.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ShutdownApplicationAsync(System.Threading.CancellationToken)">
            <summary>
            Quits qBittorrent.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetPeerLogAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the peer log.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentsAsync(QBittorrent.Client.AddTorrentsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the torrents to download.
            </summary>
            <param name="request">The request.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes all torrents.
            </summary>
            <param name="deleteDownloadedData"><see langword="true"/> to delete the downloaded data.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RecheckAsync(System.Threading.CancellationToken)">
            <summary>
            Rechecks all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RecheckAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Rechecks the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ReannounceAsync(System.Threading.CancellationToken)">
            <summary>
            Reannounces all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ReannounceAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Reannounces the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.PauseAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This method supersedes <see cref="M:QBittorrent.Client.IQBittorrentClient.PauseAllAsync(System.Threading.CancellationToken)"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.PauseAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Pauses the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ResumeAsync(System.Threading.CancellationToken)">
            <summary>
            Resumes all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This method supersedes <see cref="M:QBittorrent.Client.IQBittorrentClient.ResumeAllAsync(System.Threading.CancellationToken)"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ResumeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Resumes the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ChangeTorrentPriorityAsync(QBittorrent.Client.TorrentPriorityChange,System.Threading.CancellationToken)">
            <summary>
            Changes the torrent priority for all torrents.
            </summary>
            <param name="change">The priority change.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentDownloadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent download speed limit for all torrents.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentUploadLimitAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent upload speed limit for all torrents.
            </summary>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetLocationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the location of all torrents.
            </summary>
            <param name="newLocation">The new location.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetTorrentCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent category for all torrents.
            </summary>
            <param name="category">The category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetAutomaticTorrentManagementAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the automatic torrent management for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ToggleSequentialDownloadAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the sequential download for all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ToggleFirstLastPiecePrioritizedAsync(System.Threading.CancellationToken)">
            <summary>
            Toggles the first and last piece priority for all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetForceStartAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the force start for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetSuperSeedingAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the super seeding for all torrents.
            </summary>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddCategoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category name.</param>
            <param name="savePath">The save path for the torrents belonging to this category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.EditCategoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Changes the category save path.
            </summary>
            <param name="category">The category name.</param>
            <param name="savePath">The save path for the torrents belonging to this category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetCategoriesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all categories.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.EditTrackerAsync(System.String,System.Uri,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Changes tracker URL.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="trackerUrl">The tracker URL you want to edit.</param>
            <param name="newTrackerUrl">The new URL to replace the <paramref name="trackerUrl"/>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteTrackersAsync(System.String,System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Removes the trackers from the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="trackerUrls">The tracker URLs you want to remove.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetFilePriorityAsync(System.String,System.Collections.Generic.IEnumerable{System.Int32},QBittorrent.Client.TorrentContentPriority,System.Threading.CancellationToken)">
            <summary>
            Sets the file priority for multiple files.
            </summary>
            <param name="hash">The torrent hash.</param>
            <param name="fileIds">The file identifiers.</param>
            <param name="priority">The priority.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="inactiveSeedingTime">
            The inactive seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetNetworkInterfacesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of network interfaces on the qBittorrent machine.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetNetworkInterfaceAddressesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of network interface IP addresses.
            </summary>
            <param name="networkInterfaceId">
            The network interface id to retrieve the IP addresses for.
            If <see langword="null"/> or empty, the result will include IP addresses for all interfaces.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetBuildInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the build information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.BanPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Bans peers.
            </summary>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.BanPeersAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Threading.CancellationToken)">
            <summary>
            Bans peers.
            </summary>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="peers">The list of peers to ban. The peers must be in form <c>ip:port</c></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentPeersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.CreateTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates the tags.
            </summary>
            <param name="tags">The list of the tags to create.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes the tags.
            </summary>
            <param name="tags">The list of the tags to delete.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetTagsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of the tags.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the tags to the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the tags to all torrents.
            </summary>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the specified tags from the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>
            If the list of tags is empty, this method is no op.
            </remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the specified tags from all torrents.
            </summary>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>
            If the list of tags is empty, this method is no op.
            </remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ClearTorrentTagsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes all tags from the torrents.
            </summary>
            <param name="hashes">The torrent hashes.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.ClearTorrentTagsAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all tags from all torrents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RenameFileAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the file in the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="fileId">The ID of the file to rename.</param>
            <param name="newName">he new name to use for the file.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This overload is not supported starting from API v2.8.0. Use <see cref="M:QBittorrent.Client.QBittorrentClient.RenameFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/> instead.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RenameFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the folder of the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="oldPath">The old path of the file.</param>
            <param name="newPath">The new path to use for the file.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>This overload is not supported starting until API v2.8.0. Use <see cref="M:QBittorrent.Client.QBittorrentClient.RenameFileAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)"/> for earlier API versions instead.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RenameFolderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the folder of the torrent.
            </summary>
            <param name="hash">The hash of the torrent.</param>
            <param name="oldPath">The old path of the folder.</param>
            <param name="newPath">The new path to use for the folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddRssFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the RSS folder.
            </summary>
            <param name="path">Full path of added folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.AddRssFeedAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the RSS feed.
            </summary>
            <param name="url">The URL of the RSS feed.</param>
            <param name="path">The full path of added folder.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteRssItemAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the RSS folder or feed.
            </summary>
            <param name="path">The full path of removed folder or feed.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.MoveRssItemAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Moves or renames the RSS folder or feed.
            </summary>
            <param name="path">The current full path of the folder or feed.</param>
            <param name="newPath">The new path.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetRssItemsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets all RSS folders and feeds.
            </summary>
            <param name="withData">
              <see langword="true" /> if you need current feed articles.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.SetRssAutoDownloadingRuleAsync(System.String,QBittorrent.Client.RssAutoDownloadingRule,System.Threading.CancellationToken)">
            <summary>
            Sets the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="rule">The rule definition.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.RenameRssAutoDownloadingRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="newName">The new rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteRssAutoDownloadingRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the RSS auto-downloading rule.
            </summary>
            <param name="name">The rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetRssAutoDownloadingRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the RSS auto-downloading rules.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.MarkRssItemAsReadAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Marks the RSS article as read, if <paramref name="articleId"/> is not <see langword="null" />.
            Otherwise marks the whole RSS feed as read.
            </summary>
            <param name="itemPath">Full path of the item.</param>
            <param name="articleId">ID of the article.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetMatchingRssArticlesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all articles that match a rule by feed name.
            </summary>
            <param name="ruleName">Rule name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.StartSearchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Starts torrent search job.
            </summary>
            <param name="pattern">Pattern to search for (e.g. "Ubuntu 18.04").</param>
            <param name="plugins">Plugins to use for searching (e.g. "legittorrents").</param>
            <param name="category">
            Categories to limit your search to (e.g. "legittorrents").
            Available categories depend on the specified <paramref name="plugins"/>.
            Also supports <c>&quot;all&quot;</c>
            </param>
            <param name="token">The cancellation token.</param>
            <returns>The ID of the search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.StopSearchAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Stops torrent search job.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetSearchStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of all search jobs.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The list containing statuses and the number of found torrents for each search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetSearchStatusAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the status of the search jobs with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns>The object containing the status and the number of found torrents.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetSearchResultsAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the results of the search job with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="offset">Result to start at. A negative number means count backwards (e.g. -2 returns the 2 most recent results).</param>
            <param name="limit">The maximal number of results to return. 0 or negative means no limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DeleteSearchAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes the search job with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the search job.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetSearchCategoriesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the search categories.
            </summary>
            <param name="plugin">
            Name of the plugin (e.g. "legittorrents").
            Also supports <see cref="F:QBittorrent.Client.SearchPlugin.All"/> and <see cref="F:QBittorrent.Client.SearchPlugin.Enabled"/>.
            </param>
            <param name="token">The cancellation token.</param>
            <returns>The list of the search categories.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.GetSearchPluginsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the installed search plugins.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The list of the search plugins.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.InstallSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Installs the search plugins.
            </summary>
            <param name="sources">URLs of the plugins to install.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>Plugins can be installed from the local file system using <c>file:///</c> URIs as <paramref name="sources"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.UninstallSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Uninstalls the search plugins.
            </summary>
            <param name="names">Names of the plugins to uninstall.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.EnableSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Enables the search plugins.
            </summary>
            <param name="names">Names of the plugins to enable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.DisableSearchPluginsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Disables the search plugins.
            </summary>
            <param name="names">Names of the plugins to disable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClient.UpdateSearchPluginsAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the search plugins.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:QBittorrent.Client.QBittorrentClientExtensions">
            <summary>
            Provides extension methods for <see cref="T:QBittorrent.Client.IQBittorrentClient"/>.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteCategoryAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the category.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="category">The category name.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetTorrentCategoryAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent category.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="category">The category.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.GetTorrentDownloadLimitAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent download speed limit.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetTorrentDownloadLimitAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent download speed limit.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.GetTorrentUploadLimitAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the torrent upload speed limit.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetTorrentUploadLimitAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent upload speed limit.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="limit">The limit.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.ChangeTorrentPriorityAsync(QBittorrent.Client.IQBittorrentClient,System.String,QBittorrent.Client.TorrentPriorityChange,System.Threading.CancellationToken)">
            <summary>
            Changes the torrent priority.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="change">The priority change.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="deleteDownloadedData"><see langword="true"/> to delete the downloaded data.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetLocationAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the location of torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="newLocation">The new location.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTrackerAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Adds the tracker to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="tracker">The tracker.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetAutomaticTorrentManagementAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the automatic torrent management.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetForceStartAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the force start.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetSuperSeedingAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the super seeding.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="enabled"></param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.ToggleFirstLastPiecePrioritizedAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Toggles the first and last piece priority.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.ToggleSequentialDownloadAsync(QBittorrent.Client.IQBittorrentClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Toggles the sequential download.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.ReannounceAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Reannounces the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTrackerAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Removes the trackers from the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The hash of the torrent.</param>
            <param name="trackerUrl">The tracker URL you want to remove.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetShareLimitsAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Double,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.SetShareLimitsAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Double,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the torrent share limits.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="ratio">
            The ratio limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited"/> in order to set no limit.
            </param>
            <param name="seedingTime">
            The seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="inactiveSeedingTime">
            The inactive seeding time limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Global"/> in order to use global limit.
            Use <see cref="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited"/> in order to set no limit.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <seealso cref="T:QBittorrent.Client.ShareLimits.Ratio" />
            <seealso cref="T:QBittorrent.Client.ShareLimits.SeedingTime" />
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.GetNetworkInterfaceAddressesAsync(QBittorrent.Client.IQBittorrentClient2,System.Threading.CancellationToken)">
            <summary>
            Gets the list of IP addresses for all available network interfaces.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.GetNetworkInterfaceAddressesAsync(QBittorrent.Client.IQBittorrentClient2,QBittorrent.Client.NetInterface,System.Threading.CancellationToken)">
            <summary>
            Gets the list of IP addresses for all available network interfaces.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="networkInterface">
            The network interface to retrieve the IP addresses for.
            If <see langword="null"/>, the result will include IP addresses for all interfaces.
            </param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.BanPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Bans a peer.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="peer">The peer to ban in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.BanPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Bans a peer.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="peer">The peer to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeersAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="peers">The list of peers to ban. The peers must be in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Adds peer to the torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hashes">The torrent hashes.</param>
            <param name="peer">The peer to ban in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds peer to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="peer">The peer to ban in form <c>ip:port</c>.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeersAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Threading.CancellationToken)">
            <summary>
            Adds peers to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="peers">The list of peers to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.Collections.Generic.IEnumerable{System.String},System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Adds peer to the torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hashes">The torrent hashes.</param>
            <param name="peer">The peer to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentPeerAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Adds peer to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="peer">The peer to ban.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.CreateTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates the tag.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="tag">The list of the tags to create.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the tag.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="tag">The list of the tags to delete.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentTagsAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the tags to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the tag to the torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hashes">The torrent hashes.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the tag to the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.AddTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the tag to all torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTorrentTagsAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the specified tags from the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="tags">The tags.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified tag from the torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hashes">The torrent hashes.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified tag from the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DeleteTorrentTagAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified tag from all torrents.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="tag">The tag.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.ClearTorrentTagsAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all tags from the torrent.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="hash">The torrent hash.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.StartSearchAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts torrent search job.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="pattern">Pattern to search for (e.g. "Ubuntu 18.04").</param>
            <param name="plugin">Plugin to use for searching (e.g. "legittorrents").</param>
            <param name="category">
            Categories to limit your search to (e.g. "legittorrents").
            Available categories depend on the specified <paramref name="plugin"/>.
            Also supports <c>&quot;all&quot;</c></param>
            <param name="token">The cancellation token.</param>
            <returns>The ID of the search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.StartSearchAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts torrent search job using all or enabled plugins.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="pattern">Pattern to search for (e.g. "Ubuntu 18.04").</param>
            <param name="disabledPluginsToo">
            <see langword="false" /> to search using all enabled plugins;
            <see langword="true" /> to search using all (enabled and disabled) plugins.
            </param>
            <param name="category">
            Categories to limit your search to (e.g. "legittorrents").
            Also supports <c>&quot;all&quot;</c></param>
            <param name="token">The cancellation token.</param>
            <returns>The ID of the search job.</returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.InstallSearchPluginAsync(QBittorrent.Client.IQBittorrentClient2,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Installs the search plugins.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="source">URL of the plugins to install.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
            <remarks>Plugin can be installed from the local file system using <c>file:///</c> URI as <paramref name="source"/>.</remarks>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.UninstallSearchPluginAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Uninstalls the search plugins.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="name">Name of the plugin to uninstall.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.EnableSearchPluginAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Enables the search plugin.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="name">Name of the plugin to enable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientExtensions.DisableSearchPluginAsync(QBittorrent.Client.IQBittorrentClient2,System.String,System.Threading.CancellationToken)">
            <summary>
            Disables the search plugin.
            </summary>
            <param name="client">An <see cref="T:QBittorrent.Client.IQBittorrentClient2"/> instance.</param>
            <param name="name">Name of the plugin to disable.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:QBittorrent.Client.QBittorrentClientRequestException">
            <summary>
            This exception is thrown if QBittorrent server answers with non-success status code.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.QBittorrentClientRequestException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Creates a new instance of <see cref="T:QBittorrent.Client.QBittorrentClientRequestException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="statusCode">HTTPS status code.</param>
        </member>
        <member name="P:QBittorrent.Client.QBittorrentClientRequestException.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.Range">
            <summary>
            Torrent piece range.
            </summary>
            <seealso cref="T:System.IFormattable" />
        </member>
        <member name="M:QBittorrent.Client.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.Range"/> struct.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="P:QBittorrent.Client.Range.StartIndex">
            <summary>
            Gets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:QBittorrent.Client.Range.EndIndex">
            <summary>
            Gets the end index.
            </summary>
            <value>
            The end index.
            </value>
        </member>
        <member name="M:QBittorrent.Client.Range.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:QBittorrent.Client.Range.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:QBittorrent.Client.RssArticle">
            <summary>
            Represents an RSS article.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Id">
            <summary>
            The article id.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Date">
            <summary>
            The article date/time.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Author">
            <summary>
            The author.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.TorrentUri">
            <summary>
            The torrent URI.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.Link">
            <summary>
            The torrent link.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.IsRead">
            <summary>
            The value indicating whether the article has been read.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssArticle.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.RssAutoDownloadingRule">
            <summary>
            Represents an RSS auto-downloading rule.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.Enabled">
            <summary>
            Gets or sets the value indicating whether the rule is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.MustContain">
            <summary>
            The substring that the torrent name must contain.
            </summary>
            <seealso cref="P:QBittorrent.Client.RssAutoDownloadingRule.MustNotContain"/>
            <seealso cref="P:QBittorrent.Client.RssAutoDownloadingRule.UseRegex"/>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.MustNotContain">
            <summary>
            The substring that the torrent name must not contain.
            </summary>
            <seealso cref="P:QBittorrent.Client.RssAutoDownloadingRule.MustContain"/>
            <seealso cref="P:QBittorrent.Client.RssAutoDownloadingRule.UseRegex"/>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.UseRegex">
            <summary>
            Set to <see langword="true" /> in order to use regular expressions in 
            for <see cref="P:QBittorrent.Client.RssAutoDownloadingRule.MustContain"/> and <see cref="P:QBittorrent.Client.RssAutoDownloadingRule.MustNotContain"/> properties.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.EpisodeFilter">
            <summary>
            Episode filter definition.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.SmartFilter">
            <summary>
            Enable smart episode filter.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.PreviouslyMatchedEpisodes">
            <summary>
            The list of episode IDs already matched by smart filter.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.AffectedFeeds">
            <summary>
            The feed URLs the rule applied to.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.IgnoreDays">
            <summary>
            Ignore subsequent rule matches.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.LastMatch">
            <summary>
            The rule last match time.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.AddPaused">
            <summary>
            Add matched torrent in paused mode.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.AssignedCategory">
            <summary>
            Category to assign to the torrent.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.SavePath">
            <summary>
            The directory to save the torrent to.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssAutoDownloadingRule.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.RssFeed">
            <summary>
            Represents an RSS Feed.
            </summary>
            <seealso cref="T:QBittorrent.Client.RssItem" />
        </member>
        <member name="P:QBittorrent.Client.RssFeed.Uid">
            <summary>
            Gets or sets the uid.
            </summary>
            <value>
            The uid.
            </value>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.Url">
            <summary>
            Gets or sets the feed URL.
            </summary>
            <value>
            The feed URL.
            </value>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.Title">
            <summary>
            Gets or sets the feed title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.LastBuildDate">
            <summary>
            Gets or sets the last build date.
            </summary>
            <value>
            The last build date.
            </value>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.IsLoading">
            <summary>
            Gets or sets the value indicating whether the feed is loading.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.HasError">
            <summary>
            Gets or sets the value indicating whether the feed has an error.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.RssFeed.Articles">
            <summary>
            Gets or sets the articles.
            </summary>
            <value>
            The articles.
            </value>
        </member>
        <member name="T:QBittorrent.Client.RssFolder">
            <summary>
            Represents an RSS folder.
            </summary>
            <seealso cref="T:QBittorrent.Client.RssItem" />
        </member>
        <member name="M:QBittorrent.Client.RssFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.RssFolder"/> class.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.RssFolder.#ctor(System.Collections.Generic.IEnumerable{QBittorrent.Client.RssItem})">
            <summary>
            Initializes a new instance of the <see cref="T:QBittorrent.Client.RssFolder"/> class.
            </summary>
            <param name="items">The folder items.</param>
        </member>
        <member name="M:QBittorrent.Client.RssFolder.#ctor(System.String,System.Collections.Generic.IEnumerable{QBittorrent.Client.RssItem})">
            <summary>Initializes a new instance of the <see cref="T:QBittorrent.Client.RssFolder"/> class.</summary>
            <param name="name">The folder name.</param>
            <param name="items">The folder items.</param>
        </member>
        <member name="P:QBittorrent.Client.RssFolder.Items">
            <summary>
            Gets all folder items (feeds and folders).
            </summary>
            <seealso cref="P:QBittorrent.Client.RssFolder.Feeds"/>
            <seealso cref="P:QBittorrent.Client.RssFolder.Folders"/>
        </member>
        <member name="P:QBittorrent.Client.RssFolder.Folders">
            <summary>
            Gets all subfolders.
            </summary>
            <seealso cref="P:QBittorrent.Client.RssFolder.Items"/>
            <seealso cref="P:QBittorrent.Client.RssFolder.Feeds"/>
        </member>
        <member name="P:QBittorrent.Client.RssFolder.Feeds">
            <summary>
            Gets all feeds in the folder.
            </summary>
            <seealso cref="P:QBittorrent.Client.RssFolder.Items"/>
            <seealso cref="P:QBittorrent.Client.RssFolder.Folders"/>
        </member>
        <member name="T:QBittorrent.Client.RssItem">
            <summary>
            A base class for RSS items: feeds and folders.
            </summary>
            <seealso cref="T:QBittorrent.Client.RssFeed"/>
            <seealso cref="T:QBittorrent.Client.RssFolder"/>
        </member>
        <member name="P:QBittorrent.Client.RssItem.Name">
            <summary>
            Gets or sets RSS item name.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SaveLocation">
            <summary>
            The save location for a monitored folder.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.#ctor(QBittorrent.Client.StandardSaveLocation)">
            <summary>
            Creates a new instance for the standard folder.
            </summary>
            <param name="standardFolder"></param>
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.#ctor(System.String)">
            <summary>
            Creates a new instance for the custom folder.
            </summary>
            <param name="customFolder"></param>
        </member>
        <member name="P:QBittorrent.Client.SaveLocation.StandardFolder">
            <summary>
            Gets the custom folder. This property is <see langword="null"/> if <see cref="P:QBittorrent.Client.SaveLocation.CustomFolder"/> is not <see langword="null"/>.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SaveLocation.CustomFolder">
            <summary>
            Gets the custom folder. This property is <see langword="null"/> if <see cref="P:QBittorrent.Client.SaveLocation.StandardFolder"/> is not <see langword="null"/>.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.Equals(QBittorrent.Client.SaveLocation)">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.op_Equality(QBittorrent.Client.SaveLocation,QBittorrent.Client.SaveLocation)">
            <summary>
            Determines whether two specified save locations are equal.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.op_Inequality(QBittorrent.Client.SaveLocation,QBittorrent.Client.SaveLocation)">
            <summary>
            Determines whether two specified save locations are different.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SaveLocation.ToString">
            <inheritdoc />
        </member>
        <member name="T:QBittorrent.Client.SchedulerDay">
            <summary>
            Scheduler day.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Every">
            <summary>
            Every day
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Weekday">
            <summary>
            Every weekday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Weekend">
            <summary>
            Every weekday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Monday">
            <summary>
            Every Monday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Tuesday">
            <summary>
            Every Tuesday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Wednesday">
            <summary>
            Every 
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Thursday">
            <summary>
            Every Thursday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Friday">
            <summary>
            Every Friday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Saturday">
            <summary>
            Every Saturday
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SchedulerDay.Sunday">
            <summary>
            Every Sunday
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchJobStatus">
            <summary>
            Search job status
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SearchJobStatus.Running">
            <summary>
            Search job is running.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SearchJobStatus.Stopped">
            <summary>
            Search job is stopped.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchPlugin">
            <summary>
            Represents information about a search plugin.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SearchPlugin.All">
            <summary>
            Name that can be used to perform search using all plugins.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SearchPlugin.Enabled">
            <summary>
            Name that can be used to perform search using all enabled plugins.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.IsEnabled">
            <summary>
            Whether the plugin is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.FullName">
            <summary>
            Full name of the plugin
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.Name">
            <summary>
            Short name of the plugin
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.SupportedCategories">
            <summary>
            List of supported categories
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.Categories">
            <summary>
            List of supported categories
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.Url">
            <summary>
            URL of the torrent site
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.Version">
            <summary>
            Installed version of the plugin
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPlugin.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchPluginCategory">
            <summary>
            Search plugin category.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SearchPluginCategory.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.SearchPluginCategory"/>.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.SearchPluginCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.SearchPluginCategory"/>.
            </summary>
            <param name="idAndName">The ID and name of search plugin category.</param>
        </member>
        <member name="M:QBittorrent.Client.SearchPluginCategory.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:QBittorrent.Client.SearchPluginCategory"/>.
            </summary>
            <param name="id">The ID of search plugin category.</param>
            <param name="name">The name of search plugin category.</param>
        </member>
        <member name="P:QBittorrent.Client.SearchPluginCategory.Id">
            <summary>
            Gets or sets the ID of search plugin category.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchPluginCategory.Name">
            <summary>
            Gets or sets the name of search plugin category.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchResult">
            <summary>
            Represents a search result.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.FileSize">
            <summary>
            Size of the file in bytes.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.FileUrl">
            <summary>
            Torrent download link (usually either .torrent file or magnet link).
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.Leechers">
            <summary>
            Number of leechers.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.Seeds">
            <summary>
            Number of seeders.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.SiteUrl">
            <summary>
            URL of the torrent site
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResult.DescriptionUrl">
            <summary>
            URL of the torrent's description page.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchResults">
            <summary>
            Represents current search results of a search job.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResults.Results">
            <summary>
            Search results.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResults.Status">
            <summary>
            Current status of the search job.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchResults.Total">
            <summary>
            Total number of results.
            If the status is <see cref="F:QBittorrent.Client.SearchJobStatus.Running"/> this number may continue to increase.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SearchStatus">
            <summary>
            Represents search status.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchStatus.Id">
            <summary>
            ID of the search job.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchStatus.Status">
            <summary>
            Current status of the search job.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.SearchStatus.Total">
            <summary>
            Total number of results.
            If the status is <see cref="F:QBittorrent.Client.SearchJobStatus.Running"/> this number may continue to increase.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.SeedChokingAlgorithm">
            <summary>
            Defines the seeding unchoke behavior.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SeedChokingAlgorithm.RoundRobin">
            <summary>
            Rotates the peers that are unchoked when seeding.
            This distributes the upload bandwidth uniformly and fairly.
            It minimizes the ability for a peer to download everything without redistributing it.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SeedChokingAlgorithm.FastestUpload">
            <summary>
            Unchokes the peers we can send to the fastest.
            This might be a bit more reliable in utilizing all available capacity.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.SeedChokingAlgorithm.AntiLeech">
            <summary>
            Prioritizes peers who have just started or are just about to finish the download.
            The intention is to force peers in the middle of the download to trade with each other.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ShareLimits">
            <summary>
            Provides constants with special values for <see cref="M:QBittorrent.Client.IQBittorrentClient2.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ShareLimits.Ratio">
            <summary>
            Provides constants for <c>ratio</c> parameter of <see cref="M:QBittorrent.Client.IQBittorrentClient2.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ShareLimits.Ratio.Global">
            <summary>
            Set global limit.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ShareLimits.Ratio.Unlimited">
            <summary>
            Set no limit.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.ShareLimits.SeedingTime">
            <summary>
            Provides constants for <c>seedingTime</c> parameter of <see cref="M:QBittorrent.Client.IQBittorrentClient2.SetShareLimitsAsync(System.Collections.Generic.IEnumerable{System.String},System.Double,System.TimeSpan,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ShareLimits.SeedingTime.Global">
            <summary>
            Set global limit.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.ShareLimits.SeedingTime.Unlimited">
            <summary>
            Set no limit.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.StandardSaveLocation">
            <summary>
            The standard download location for a monitored folder.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.StandardSaveLocation.MonitoredFolder">
            <summary>
            Monitored folder.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.StandardSaveLocation.Default">
            <summary>
            The default save location.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentContent">
            <summary>
            Represents torrent content file info.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Name">
            <summary>
            File name (including relative path)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Progress">
            <summary>
            File progress (percentage/100)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Priority">
            <summary>
            File priority
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.IsSeeding">
            <summary>
            True if file is seeding/complete
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.PieceRange">
            <summary>
            The range of the file.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Availability">
            <summary>
            Gets the file availability, calculated as <c>(available_pieces)/(total_pieces)</c>
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentContent.Index">
            <summary>
            File index
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentContentLayout">
            <summary>
            Defines the layout of torrent content.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentLayout.Original">
            <summary>
            Original layout
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentLayout.Subfolder">
            <summary>
            Create subfolder
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentLayout.NoSubfolder">
            <summary>
            Do not create subfolder
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentContentPriority">
            <summary>
            Torrent content file download priority
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.Skip">
            <summary>
            Do not download the file (0).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.Minimal">
            <summary>
            The minimal priority (1). 
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.VeryLow">
            <summary>
            The very low priority (2).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.Low">
            <summary>
            The low priority (3).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.Normal">
            <summary>
            The normal priority (4).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.High">
            <summary>
            The high priority (5).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.VeryHigh">
            <summary>
            The very high priority (6).
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentContentPriority.Maximal">
            <summary>
            The maximal priority (7).
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentFileAutoDeleteMode">
            <summary>
            Specificies when .torrent file must be deleted
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentFileAutoDeleteMode.Never">
            <summary>
            Never
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentFileAutoDeleteMode.IfAdded">
            <summary>
            After the torrent has been added
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentFileAutoDeleteMode.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentInfo">
            <summary>
            Represents main information about torrent.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Hash">
            <summary>
            Torrent hash
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Name">
            <summary>
            Torrent name
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.MagnetUri">
            <summary>
            Magnet URI for the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Size">
            <summary>
            Total size (bytes) of files selected for download
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Progress">
            <summary>
            Torrent progress (percentage/100)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.DownloadSpeed">
            <summary>
            Torrent download speed (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.UploadSpeed">
            <summary>
            Torrent upload speed (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Priority">
            <summary>
            Torrent priority. Returns -1 if queuing is disabled or torrent is in seed mode
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.ConnectedSeeds">
            <summary>
            Number of seeds connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.TotalSeeds">
            <summary>
            Number of seeds in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.ConnectedLeechers">
            <summary>
            Number of leechers connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.TotalLeechers">
            <summary>
            Number of leechers in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Ratio">
            <summary>
            Torrent share ratio. Max ratio value is <c>9999</c>. If actual ratio is greater than <c>9999</c>, <c>-1</c> is returned.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.EstimatedTime">
            <summary>
            Torrent ETA
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.State">
            <summary>
            Torrent state
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.SequentialDownload">
            <summary>
            True if sequential download is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.FirstLastPiecePrioritized">
            <summary>
            True if first last piece are prioritized
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Category">
            <summary>
            Category of the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Tags">
            <summary>
            The torrent tags
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.SuperSeeding">
            <summary>
            True if super seeding is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.ForceStart">
            <summary>
            True if force start is enabled for this torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.SavePath">
            <summary>
            The torrent save path
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.AddedOn">
            <summary>
            The date and time when the torrent was added
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.CompletionOn">
            <summary>
            The date and time when the torrent was completed
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.CurrentTracker">
            <summary>
            The current torrent tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.DownloadLimit">
            <summary>
            The download speed limit (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.UploadLimit">
            <summary>
            The upload speed limit (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Downloaded">
            <summary>
            The downloaded data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.Uploaded">
            <summary>
            The uploaded data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.DownloadedInSession">
            <summary>
            The downloaded in this session data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.UploadedInSession">
            <summary>
            The uploaded in this session data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.IncompletedSize">
            <summary>
            The remaining amount to download (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.CompletedSize">
            <summary>
            The completed amount (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.RatioLimit">
            <summary>
            The maximal allowed ratio
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.LastSeenComplete">
            <summary>
            The date and time when this torrent was seen complete for the last time
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.LastActivityTime">
            <summary>
            The date and time when this torrent was seen active for the last time
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.ActiveTime">
            <summary>
            The active time of this torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.AutomaticTorrentManagement">
            <summary>
            Indicates whether automatic torrent management is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.TotalSize">
            <summary>
            Total torrent size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.SeedingTime">
            <summary>
            Torrent elapsed time while complete (seconds)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.ContentPath">
            <summary>
            Absolute path of torrent content (root path for multifile torrents, absolute file path for singlefile torrents)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentInfo.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.TorrentInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:QBittorrent.Client.TorrentListFilter">
            <summary>
            The status filter for the torrent list.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.All">
            <summary>
            All torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Downloading">
            <summary>
            The torrents being downloaded
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Completed">
            <summary>
            The completed torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Paused">
            <summary>
            The paused torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Active">
            <summary>
            The active torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Inactive">
            <summary>
            The inactive torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Seeding">
            <summary>
            The torrent being seeded
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Resumed">
            <summary>
            The resumed torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Errored">
            <summary>
            The errored torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.Stalled">
            <summary>
            The stalled torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.StalledUploading">
            <summary>
            The stalled torrents being uploaded
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentListFilter.StalledDownloading">
            <summary>
            The stalled torrents being downloaded
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentListQuery">
            <summary>
            Encapsulates the query parameters to get the list of torrents.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Category">
            <summary>
            Gets or sets the category to filter by.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.SortBy">
            <summary>
            Gets or sets the field to sort by.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.ReverseSort">
            <summary>
            Gets or sets a value indicating whether sorting must be performed in the descending order.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Limit">
            <summary>
            Gets or sets the maximal number of torrents to return.
            </summary>
            <seealso cref="P:QBittorrent.Client.TorrentListQuery.Offset"/>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Offset">
            <summary>
            Gets or sets the offset from the beginning of the torrent list.
            </summary>
            <seealso cref="P:QBittorrent.Client.TorrentListQuery.Limit" />
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Hashes">
            <summary>
            Gets or sets the hashes of the torrents to display.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentListQuery.Tag">
            <summary>
            Get torrents with the given tag (empty string means "without tag"; no "tag" parameter means "any tag".
            Remember to URL-encode the category name. For example, <c>My tag</c> becomes <c>My%20tag</c>.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentLogEntry">
            <summary>
            Represents QBittorrent log entry.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentLogEntry.Id">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentLogEntry.Message">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentLogEntry.Timestamp">
            <summary>
            Message timestamp
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentLogEntry.Severity">
            <summary>
            Log entry severity.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentLogSeverity">
            <summary>
            The QBittorrent log entry severity.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentLogSeverity.Normal">
            <summary>
            The normal severity
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentLogSeverity.Info">
            <summary>
            The information severity
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentLogSeverity.Warning">
            <summary>
            The warning severity
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentLogSeverity.Critical">
            <summary>
            The critical error severity
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentLogSeverity.All">
            <summary>
            All severities. For use in filters only.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentPartialInfo">
            <summary>
            Represents the changes in information about torrent since the last refresh.
            </summary>
            <seealso cref="T:QBittorrent.Client.PartialData"/>
            <seealso cref="M:QBittorrent.Client.QBittorrentClient.GetPartialDataAsync(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Name">
            <summary>
            Torrent name
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.MagnetUri">
            <summary>
            Magnet URI for the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Size">
            <summary>
            Total size (bytes) of files selected for download
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Progress">
            <summary>
            Torrent progress (percentage/100)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.DownloadSpeed">
            <summary>
            Torrent download speed (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.UploadSpeed">
            <summary>
            Torrent upload speed (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Priority">
            <summary>
            Torrent priority. Returns -1 if queuing is disabled or torrent is in seed mode
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.ConnectedSeeds">
            <summary>
            Number of seeds connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.TotalSeeds">
            <summary>
            Number of seeds in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.ConnectedLeechers">
            <summary>
            Number of leechers connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.TotalLeechers">
            <summary>
            Number of leechers in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Ratio">
            <summary>
            Torrent share ratio. Max ratio value is <c>9999</c>. If actual ratio is greater than <c>9999</c>, <c>-1</c> is returned.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.EstimatedTime">
            <summary>
            Torrent ETA
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.State">
            <summary>
            Torrent state
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.SequentialDownload">
            <summary>
            True if sequential download is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.FirstLastPiecePrioritized">
            <summary>
            True if first last piece are prioritized
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Category">
            <summary>
            Category of the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Tags">
            <summary>
            The torrent tags
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.SuperSeeding">
            <summary>
            True if super seeding is enabled
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.ForceStart">
            <summary>
            True if force start is enabled for this torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.SavePath">
            <summary>
            The torrent save path
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.AddedOn">
            <summary>
            The date and time when the torrent was added
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.CompletionOn">
            <summary>
            The date and time when the torrent was completed
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.CurrentTracker">
            <summary>
            The current torrent tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.DownloadLimit">
            <summary>
            The download speed limit (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.UploadLimit">
            <summary>
            The upload speed limit (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Downloaded">
            <summary>
            The downloaded data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.Uploaded">
            <summary>
            The uploaded data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.DownloadedInSession">
            <summary>
            The downloaded in this session data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.UploadedInSession">
            <summary>
            The uploaded in this session data size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.IncompletedSize">
            <summary>
            The remaining amount to download (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.CompletedSize">
            <summary>
            The completed amount (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.RatioLimit">
            <summary>
            The maximal allowed ratio
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.SeedingTimeLimit">
            <summary>
            Upload seeding time limit 
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.InactiveSeedingTimeLimit">
            <summary>
            Upload inactive seeding time limit 
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.LastSeenComplete">
            <summary>
            The date and time when this torrent was seen complete for the last time
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.LastActivityTime">
            <summary>
            The date and time when this torrent was seen active for the last time
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.ActiveTime">
            <summary>
            The active time of this torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.AutomaticTorrentManagement">
            <summary>
            Indicates whether automatic torrent management is enabled.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.TotalSize">
            <summary>
            Total torrent size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentPartialInfo.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="M:QBittorrent.Client.TorrentPartialInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:QBittorrent.Client.TorrentPieceState">
            <summary>
            Torrent piece state.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPieceState.NotDownloaded">
            <summary>
            The download has not been started yet.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPieceState.Downloading">
            <summary>
            The piece is being downloaded.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPieceState.Downloaded">
            <summary>
            The piece has been downloaded.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentPriorityChange">
            <summary>
            Represent requested value for torrent priority.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPriorityChange.Minimal">
            <summary>
            Set the minimal priority.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPriorityChange.Increase">
            <summary>
            Increase priority.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPriorityChange.Decrease">
            <summary>
            Decrease priority.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentPriorityChange.Maximal">
            <summary>
            Set the maximal priority.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentProperties">
            <summary>
            Represents additional torrent properties.
            </summary>
            <seealso cref="T:QBittorrent.Client.TorrentInfo"/>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.SavePath">
            <summary>
            Torrent save path
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.CreationDate">
            <summary>
            Torrent creation date
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.Comment">
            <summary>
            Torrent comment
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.Size">
            <summary>
            Torrent total size (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalWasted">
            <summary>
            Total data wasted for torrent (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalUploaded">
            <summary>
            Total data uploaded for torrent (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalUploadedInSession">
            <summary>
            Total data uploaded this session (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalDownloaded">
            <summary>
            Total data downloaded for torrent (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalDownloadedInSession">
            <summary>
            Total data downloaded this session (bytes)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.UploadLimit">
            <summary>
            Torrent upload limit (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.DownloadLimit">
            <summary>
            Torrent download limit (bytes/s)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TimeElapsed">
            <summary>
            Torrent elapsed time
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.SeedingTime">
            <summary>
            Torrent elapsed time while complete
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.ConnectionCount">
            <summary>
            Torrent connection count
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.ConnectionLimit">
            <summary>
            Torrent connection count limit
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.ShareRatio">
            <summary>
            Torrent share ratio
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.AdditionDate">
            <summary>
            When this torrent was added
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.CompletionDate">
            <summary>
            Torrent completion date
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.CreatedBy">
            <summary>
            Torrent creator
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.AverageDownloadSpeed">
            <summary>
            Torrent average download speed (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.DownloadSpeed">
            <summary>
            Torrent download speed (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.AverageUploadSpeed">
            <summary>
            Torrent average upload speed (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.UploadSpeed">
            <summary>
            Torrent upload speed (bytes/second)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.EstimatedTime">
            <summary>
            Torrent ETA
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.LastSeen">
            <summary>
            Last seen complete date
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.Peers">
            <summary>
            Number of peers connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalPeers">
            <summary>
            Number of peers in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.Seeds">
            <summary>
            Number of seeds connected to
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalSeeds">
            <summary>
            Number of seeds in the swarm
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.PieceSize">
            <summary>
            Torrent piece size
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.OwnedPieces">
            <summary>
            Number of pieces owned
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.TotalPieces">
            <summary>
            Number of pieces of the torrent
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.Reannounce">
            <summary>
            Number of seconds until the next announce
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentProperties.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentState">
            <summary>
            The torrent state.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Error">
            <summary>
            Some error occurred, applies to paused torrents
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.PausedUpload">
            <summary>
            Torrent is paused and has finished downloading
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.PausedDownload">
            <summary>
            Torrent is paused and has NOT finished downloading
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.QueuedUpload">
            <summary>
            Queuing is enabled and torrent is queued for upload
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.QueuedDownload">
            <summary>
            Queuing is enabled and torrent is queued for download
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Uploading">
            <summary>
            Torrent is being seeded and data is being transferred
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.StalledUpload">
            <summary>
            Torrent is being seeded, but no connection were made
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.CheckingUpload">
            <summary>
            Torrent has finished downloading and is being checked; 
            this status also applies to preallocation (if enabled) and checking resume data on qBt startup
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.CheckingDownload">
            <summary>
            Torrent is being checked
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Downloading">
            <summary>
            Torrent is being downloaded and data is being transferred
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.StalledDownload">
            <summary>
            Torrent is being downloaded, but no connection were made
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.FetchingMetadata">
            <summary>
            Torrent has just started downloading and is fetching metadata
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.ForcedFetchingMetadata">
            <summary>
            Torrent has just started downloading and is fetching metadata
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.ForcedUpload">
            <summary>
            
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.ForcedDownload">
            <summary>
            
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.MissingFiles">
            <summary>
            The files are missing
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Allocating">
            <summary>
            Allocating space on disk
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.QueuedForChecking">
            <summary>
            Queued for checking
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.CheckingResumeData">
            <summary>
            Resume data is being checked
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentState.Moving">
            <summary>
            Data is being moved from the temporary folder
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentTracker">
            <summary>
            Represents the torrent tracker information.
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Url">
            <summary>
            Tracker URL
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Status">
            <summary>
            Tracker status as string
            </summary>
            <seealso cref="P:QBittorrent.Client.TorrentTracker.TrackerStatus"/>
            <remarks>
            <para>Until API v2.2.0 this property might return localized status string.</para>
            <para>Starting from API v2.2.0 this property always returns English status string.</para>
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.TrackerStatus">
            <summary>
            Tracker status
            </summary>
            <seealso cref="P:QBittorrent.Client.TorrentTracker.Status"/>
            <remarks>
            Until API v2.2.0 this property might always return null on non-English localizations.
            </remarks>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Peers">
            <summary>
            Number of peers for current torrent reported by the tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Seeds">
            <summary>
            Number of seeds for current torrent reported by the tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Leeches">
            <summary>
            Number of leeches for current torrent reported by the tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.CompletedDownloads">
            <summary>
            Number of completed downloads for current torrent reported by the tracker
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Tier">
            <summary>
            Tracker priority tier. Lower tier trackers are tried before higher tiers
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.Message">
            <summary>
            Tracker message (there is no way of knowing what this message is - it's up to tracker admins)
            </summary>
        </member>
        <member name="P:QBittorrent.Client.TorrentTracker.AdditionalData">
            <summary>
            Additional properties not handled by this library.
            </summary>
        </member>
        <member name="T:QBittorrent.Client.TorrentTrackerStatus">
            <summary>
            Describes torrent tracker status
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentTrackerStatus.Disabled">
            <summary>
            Tracker is disabled (used for DHT, PeX, and LSD)
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentTrackerStatus.NotContacted">
            <summary>
            Tracker has not been contacted yet
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentTrackerStatus.Working">
            <summary>
            Tracker has been contacted and is working
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentTrackerStatus.Updating">
            <summary>
            Tracker is currently being updated
            </summary>
        </member>
        <member name="F:QBittorrent.Client.TorrentTrackerStatus.NotWorking">
            <summary>
            Tracker has been contacted, but it is not working (or doesn't send proper replies)
            </summary>
        </member>
        <member name="T:QBittorrent.Client.UtpTcpMixedModeAlgorithm">
            <summary>
            Determines how to treat TCP connections when there are uTP connections.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.UtpTcpMixedModeAlgorithm.PreferTcp">
            <summary>
            Prefer TCP connections.
            </summary>
        </member>
        <member name="F:QBittorrent.Client.UtpTcpMixedModeAlgorithm.PeerProportional">
            <summary>
            Rate limit all TCP connections to their proportional share based on how many of the connections are TCP.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
    </members>
</doc>
